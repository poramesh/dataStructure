case 1: No child

                             12
			    /     \
			  5        15
			 /   \     /   \
         		3      7   13    17
                       /         \         \
                       1           9         19

so we are deleting 19, we jsut need to remove the reference from the parent so we will detach the link.
and then we need to reclaim the memory that we allocated. 
since it is a leaf node, we can jsut delete the reference. the property is conserved. 1,9,13, adn 19 are easier to be wiped off haha

case 2: one child

                             12
			    /     \
			  5        15
			/   \     /   \
		      3      7   13    17
                      /        \         \
                     1           9         19


7 has only one child. we can link  7's parents to his only child.
so only the adress of the left subtree of 5 has changed, and also if the original tree had 8 and 11 as the child to 9 it 
wouldnt have affected the property.

                             12
			    /     \
			  5        15
			/   \      /   \
		      3      9    13    17
                      /       / \           \
                     1       8   11          19

node with only one child can be linked to its parents and then we can wipe of the node from the memory.

there is another which has only one child that is 3 and 17 


case 3: 2 children
                               12
			    /       \
			  5           15
			/   \        /    \
		      3      7      13      17
                      /       \      \        \
                     1         9      14       20
                              /  \             /
                             8    11         18

to remove the value 15 from the tree.

delete(node * root, int data)

we will remove the data 15 from the tree and look for the minimum value in right subtree. 
and now  we can notice that  17 has the only child.

                               12
			    /       \
			  5           17
			/   \        /    \
		      3      7      13      17
                      /       \      \        \
                     1         9      14       20
                              /  \             /
                             8    11         18

all the element from the left will be less. and all the eleemt on right will greater or equal.
it will have duplicate, once it is removed everything will be fine.

***another property: if a node has a minimum value, then the node has not left child ,, if there is a left child then its lesser.

by doing this we reduced the case 3 to case 2.
                              12
			    /       \
			  5           17
			/   \        /    \
		      3      7      13      20
                      /       \      \       /
                     1         9      14    18
                              /  \             
                             8    11        

find min in right sub tree, copy the value in targetted node. delete duplicate from right subtree.

(or)

we can find max in left , copy the value in targetted node. delete duplicate from left-subtree.

                               12
			    /       \
			  5          15->14
			/   \        /    \
		      3      7      13      17
                      /       \      \        \
                     1         9      14       20
                              /  \             /
                             8    11         18

by doing this we will reduce it to case 1..


LETS WRITE CODEEEE!!!


// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>


struct node{
    int data;
    struct node* left;
    struct node* right;
};

int findMin(struct node* root, int data){
    
    while(root->left!=NULL){
        root= root->left;
    }
    return root->data;
    
}

struct node* deleteNode(struct node * root, int data){
    if(root == NULL){
        return NULL;
    } else if (root->data != data){
        if(data<= root->data){
            root->left = deleteNode(root->left,data);
            } else { 
                root->right = deleteNode(root->right,data);
            }
    }
    else if(root->left==NULL&&root->right==NULL){
        free(root);
        root = NULL;
    } else if(root->left ==NULL){
        struct node* temp = root;
        free(temp);
        root = root->right;
    } else if(root->right == NULL){
        struct node* temp = root;
        free(temp);
        root = root->left;
    } else {
        root->data = findMin(root->right,data);
        root->right = deleteNode(root->right, root->data);
    }
    return root;
}

struct node* getNewNode(int data){
    struct node * newNode = (struct node*)(malloc(sizeof(struct node)));
    newNode-> data = data;
    newNode->left = newNode->right = NULL;
    return newNode;
}

struct node * insert(int data, struct node* root){
    if (root == NULL) return getNewNode(data);
    else if(data <= root->data){
        root->left = insert(data,root->left);
    } else root->right = insert(data, root->right);
    return root;
}

void inorder(struct node* root){
    if(root == NULL) return;
    inorder(root->left);
    printf("%d ",root->data);
    inorder(root->right);
}

int main() {
     
     struct node * root = NULL;
     root = insert(12,root);
     root = insert(5,root);
     root = insert(3, root);
     root = insert(1, root);
     root = insert(7, root);
     root = insert(9, root);
     root = insert(15, root);
     root = insert(13, root);
     root = insert(17, root);
     root = insert(19, root);
     inorder(root );
     printf("\n");
     deleteNode(root, 19);
          inorder(root);
          
          
          //i dont know how this code worked but it worked yeayyayyay hurrayyyyyyyyyyyyyyyieeiieieeieiei 
//yet i would prefer the code that followed the best logic so go through the link and refer that

    
}

https://gist.github.com/mycodeschool/9465a188248b624afdbf

/* Deleting a node from Binary search tree */
#include<iostream>
using namespace std;
struct Node {
	int data;
	struct Node *left;
	struct Node *right;
};
//Function to find minimum in a tree. 
Node* FindMin(Node* root)
{
	while(root->left != NULL) root = root->left;
	return root;
}

// Function to search a delete a value from tree.
struct Node* Delete(struct Node *root, int data) {
	if(root == NULL) return root; 
	else if(data < root->data) root->left = Delete(root->left,data);
	else if (data > root->data) root->right = Delete(root->right,data);
	// Wohoo... I found you, Get ready to be deleted	
	else {
		// Case 1:  No child
		if(root->left == NULL && root->right == NULL) { 
			delete root;
			root = NULL;
		}
		//Case 2: One child 
		else if(root->left == NULL) {
			struct Node *temp = root;
			root = root->right;
			delete temp;
		}
		else if(root->right == NULL) {
			struct Node *temp = root;
			root = root->left;
			delete temp;
		}
		// case 3: 2 children
		else { 
			struct Node *temp = FindMin(root->right);
			root->data = temp->data;
			root->right = Delete(root->right,temp->data);
		}
	}
	return root;
}
 
//Function to visit nodes in Inorder
void Inorder(Node *root) {
	if(root == NULL) return;
 
	Inorder(root->left);       //Visit left subtree
	printf("%d ",root->data);  //Print data
	Inorder(root->right);      // Visit right subtree
}
 
// Function to Insert Node in a Binary Search Tree
Node* Insert(Node *root,char data) {
	if(root == NULL) {
		root = new Node();
		root->data = data;
		root->left = root->right = NULL;
	}
	else if(data <= root->data)
		root->left = Insert(root->left,data);
	else 
		root->right = Insert(root->right,data);
	return root;
}

int main() {
	/*Code To Test the logic
	  Creating an example tree
	                    5
			   / \
			  3   10
			 / \   \
			1   4   11
    */
	Node* root = NULL;
	root = Insert(root,5); root = Insert(root,10);
	root = Insert(root,3); root = Insert(root,4); 
	root = Insert(root,1); root = Insert(root,11);

	// Deleting node with value 5, change this value to test other cases
	root = Delete(root,5);

	//Print Nodes in Inorder
	cout<<"Inorder: ";
	Inorder(root);
	cout<<"\n";
}



