       8                 
      /
     6
    /
   4
this is a BST

           10
           /\
          5  16
         /\ 
        4  7
       /    \
      1      11
this is not a BST (11 is in the left)

        7
       /\
      4  9
     /\
    1 6
this is a BST

      5
     / \
    1   8
       /  \
      9    12
this is not a BST(9 is in left)

a binary tree in which for each node, value of all the nodes in left subtree is lesser or equal and value of all the nodes
in right subtreee is greater.


      Rooot
    /       \
 BST        BST
left        right subtree(greater)
subtree(lesser or equal)


method 1: 
this methods keeps on calling recursively

// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<stdbool.h>


struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* getNewnode(int data){
    struct node* newNode = (struct node*)(malloc(sizeof(struct node)));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct node* insert(int data, struct node* root){
    if(root==NULL){
        root = getNewnode(data);
    } else if(data<=root->data){
        root->left = insert(data, root->left); 
    } else root->right = insert(data, root->right);
    return root;
}

bool isSubTreeLesser(struct node* root, int value){
    if(root == NULL) return true;
    if(root->data<=value && isSubTreeLesser(root->left,value) && isSubTreeLesser(root->right,value))
    return true;
    else return false;
}
bool isSubTreeGreater(struct node* root, int value){
    if (root == NULL) return true;
    if(root -> data > value && isSubTreeGreater(root->left,value) && isSubTreeGreater(root->right,value)) 
    return true;
    else return false;
}

bool isBinarySearchTree(struct node* root){
    // return true if BST, false otherwise
    if (root == NULL) return true;
    if(isSubTreeLesser(root->left,root->data) && isSubTreeGreater(root->right,root->data) && isBinarySearchTree(root->left) && isBinarySearchTree(root->right)) 
    return true;
    else return false;
    
}



int main() {
    struct node* root = NULL;
    root = insert(10,root);
    root = insert(8,root);
    root = insert(7, root);
    root = insert(9,root);
    root = insert(12,root);
    root = insert(11,root);
    root = insert(15,root);
    root = insert(14,root);
    root = insert(16,root);
    bool val = isBinarySearchTree(root);
    if(val){
    printf("binary tree");
    }
    else printf("Not a binary tree");
 
    return 0;
    
      /*
            10
            /\
           8  12    
          /\   /\
         7  9 11 15
                 / \
                14  16 
      
      */
}
______________________________________________________________

method 2: defining the range in the root node and the data should be within that range.

                    10(-infi,+infi)
               /           \
(-infi,10)    8             12  (10, infi)    
            /  \           /    \
(-infi,8)  7   9        11      15(12,infi)
              (8,10)   (10,12)   / \
                                14  16 
                            (12,15)   (15,infi)


// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#define INT_MIN -2147483647
#define INT_MAX +2147483647

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* getNewnode(int data){
    struct node* newNode = (struct node*)(malloc(sizeof(struct node)));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct node* insert(int data, struct node* root){
    if(root==NULL){
        root = getNewnode(data);
    } else if(data<=root->data){
        root->left = insert(data, root->left);
    } else root->right = insert(data, root->right);
    return root;
}


bool isBstUtil(struct node* root, int minValue, int maxValue){
    // return true if BST, false otherwise
    if (root == NULL) return true;
    if((root->data > minValue) && (root->data < maxValue) && isBstUtil(root->left,minValue,root->data) && isBstUtil(root->right,root->data,maxValue)) 
    return true;
    else return false;
    
}

bool isBST(struct node* root){
    return isBstUtil(root,INT_MIN,INT_MAX);
}



int main() {
    struct node* root = NULL;
    root = insert(10,root);
    root = insert(8,root);
    root = insert(7, root);
    root = insert(9,root);
    root = insert(12,root);
    root = insert(11,root);
    root = insert(15,root);
    root = insert(14,root);
    root = insert(16,root);
    bool val = isBST(root);
    if(val){
    printf("binary tree");
    }
    else printf("Not a binary tree");
 
    return 0;
    
      /*
            10
            /\
           8  12    
          /\   /\
         7  9 11 15
                 / \
                14  16 
      
      */
}




isBstUtil(10, -∞, ∞)
Is 10 in (-∞, ∞)? → YES
Now check left and right subtrees:
Left child: isBstUtil(8, -∞, 10)
Right child: isBstUtil(12, 10, ∞)

2. isBstUtil(8, -∞, 10)
Is 8 in (-∞, 10)? → YES
Check left and right:
Left: isBstUtil(7, -∞, 8)
Right: isBstUtil(9, 8, 10)

3. isBstUtil(7, -∞, 8)
Is 7 in (-∞, 8)? → YES
Left and right are NULL → returns true for both

4. isBstUtil(9, 8, 10)
Is 9 in (8, 10)? → YES
Left and right are NULL → returns true for both
So 8's whole subtree is OK.

5. isBstUtil(12, 10, ∞)
Is 12 in (10, ∞)? → YES
Check left and right:
Left: isBstUtil(11, 10, 12)
Right: isBstUtil(15, 12, ∞)

6. isBstUtil(11, 10, 12)
Is 11 in (10, 12)? → YES
Left and right are NULL → returns true for both

7. isBstUtil(15, 12, ∞)
Is 15 in (12, ∞)? → YES
Check left and right:
Left: isBstUtil(14, 12, 15)
Right: isBstUtil(16, 15, ∞)

8. isBstUtil(14, 12, 15)
Is 14 in (12, 15)? → YES
Left and right are NULL → returns true for both

9. isBstUtil(16, 15, ∞)
Is 16 in (15, ∞)? → YES
Left and right are NULL → returns true for both


So 15's whole subtree is OK.
So 12's whole subtree is OK.
So 10's whole tree is OK.


Node | Range    | Is it OK?
10   | (-∞, ∞)  | Yes
8    | (-∞, 10) | Yes
7    | (-∞, 8)  | Yes
9    | (8, 10)  | Yes
12   | (10, ∞)  | Yes
11   | (10, 12) | Yes
15   | (12, ∞)  | Yes
14   | (12, 15) | Yes
16   | (15, ∞)  | Yes
------------------------------

Method 3: using inroder traversal

// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<stdbool.h>

#define INT_MIN -2147483647
#define INT_MAX +2147483647

struct node{
    int data;
    struct node* left;
    struct node* right;
};

struct node* getNewnode(int data){
    struct node* newNode = (struct node*)(malloc(sizeof(struct node)));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct node* insert(int data, struct node* root){
    if(root==NULL){
        root = getNewnode(data);
    } else if(data>=root->data){  //##have changed the logic so it owuld binary tree or not
        root->left = insert(data, root->left);
    } else root->right = insert(data, root->right);
    return root;
}
bool IsInOrder(struct node* root, int* var){
	if (node == NULL){
		return true;
	}
	else{
		return (IsInOrder(root->left, var) && (*var <= root->data) && (*var = root->data) && IsInOrder(root->right, var));
	}
}

bool IsBinarySearchTree(struct node* root){ 
	int num = INT_MIN;
	int *var = &num;  
	return IsInOrder(root, var);
}
int main() {
    struct node* root = NULL;
    root = insert(10,root);
    root = insert(8,root);
    root = insert(7, root);
    root = insert(9,root);
    root = insert(12,root);
    root = insert(11,root);
    root = insert(15,root);
    root = insert(14,root);
    root = insert(16,root);
    bool val = IsBinarySearchTree(root);
    if(val){
    printf("binary tree");
    }
    else printf("Not a binary tree");
 
    return 0;
    
      /*
            10
            /\
           8  12    
          /\   /\
         7  9 11 15
                 / \
                14  16 
      
      */
}



"""  /*
                  0
                1|10|2
                  /\
                1    2      
             3|5|Null  NULL|12|NULL  
               /
              3
             7|7|NULL  
               /  
              7     
         NULL|6|NULL  
      
      */"""



         10
        /  \
      5     15
     / \   /  \
    3   7 12  20



Start with root 10, initialize *var = -∞.
Traverse left to 5, then left to 3. 3 is the smallest value, so *var = 3.
Backtrack to 5. Now, check if *var (3) ≤ 5, which is true. So, *var = 5.
Traverse right to 7. Check if *var (5) ≤ 7, which is true. So, *var = 7.
Backtrack to 10. Check if *var (7) ≤ 10, which is true. So, *var = 10.
Traverse right to 15. Check if *var (10) ≤ 15, which is true. So, *var = 15.
Traverse left to 12. Check if *var (15) ≤ 12, which is false, so it returns false.
