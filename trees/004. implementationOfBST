BST  

how do we create non linear logical structure in computer memory.
we can use dynmaically created nodes taht we create jst like we for for linked list.

struct node{
int data;
node* left;
node* right;
}
we had a similar implementation for doubly linked list, one for prev node and one for net node.
but this one is for BST which is non linear.
nodes will be created in head using malloc function in c or new operator in c++.

struct bstNode{
int data;
struct bstNode* left;
struct bstNode* right;
}
struct bstNode* rootPtr; //to store adress of root node.


                               15
                              /  \
                            10    20
                          /  \    / \
                         8   12  17  25
// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<stdbool.h>


struct bstNode{
    int data;
    struct bstNode* left;
    struct bstNode* right;
};


struct bstNode* getNewNode(int data){
    struct bstNode* newNode = (struct bstNode*)(malloc(sizeof(struct bstNode))); 
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}
struct bstNode* insert(int data, struct bstNode* root){
    if(root==NULL){
        root = getNewNode(data);
    } else if(data <= root->data){
            root->left = insert(data, root->left);
        } else {
            root->right = insert(data, root->right);
        }
    return root; //watch out this is where returning happening haahah it recursively updates the nodes adress
}

bool search(struct bstNode* root, int data){
    if(root==NULL){
        return false;
    }else if(root->data==data){
        return true;
    }
    else if(data <= root->data){
        return search(root->left,data);
        } else {
            return search(root->right,data);
    }
}


int main() {
    struct bstNode* root = NULL;
    root = insert(15, root);
    root = insert(11, root);
    root = insert(20, root);
    root = insert(19, root);

    bool isTrue = search(root,20);
    if(isTrue==true){
        printf("found it");
    } else printf("not found");
    return 0;
}
 code: https://gist.github.com/mycodeschool/44e1a9183ab0e931f729



in python:

By passing root

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BST:
    def insert(self, data, root):
        if root is None:
            return Node(data)
        elif data <= root.data:
            root.left = self.insert(data, root.left)
        else:
            root.right = self.insert(data, root.right)
        return root
    
    def inorder(self, root):
        if root:
            self.inorder(root.left)
            print(root.data, end=' ')
            self.inorder(root.right)

# Test it
bst = BST()
root = None
root = bst.insert(15, root)
root = bst.insert(11, root)
root = bst.insert(20, root)
root = bst.insert(19, root)

bst.inorder(root)  # Should print: 11 15 19 20



Without passing root (using self.root)

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None  # Store the root inside the class
    
    def insert(self, data):
        # Now we donâ€™t need to pass root; we work directly with self.root
        self.root = self._insert_recursive(self.root, data)
        
    def _insert_recursive(self, root, data):
        if root is None:
            return Node(data)
        elif data <= root.data:
            root.left = self._insert_recursive(root.left, data)
        else:
            root.right = self._insert_recursive(root.right, data)
        return root
    
    def inorder(self):
        self._inorder_recursive(self.root)
        
    def _inorder_recursive(self, root):
        if root:
            self._inorder_recursive(root.left)
            print(root.data, end=' ')
            self._inorder_recursive(root.right)

# Test it
bst = BST()
bst.insert(15)
bst.insert(11)
bst.insert(20)
bst.insert(19)

bst.inorder()  # Should print: 11 15 19 20

