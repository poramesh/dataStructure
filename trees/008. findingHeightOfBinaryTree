height of tree = number of edges in longest path from root to a leaf node.
height of a node = number of edges in longest path from the node to a leaf node. 
height of tree = height of root.
height if tree wiht 1 node = 0
depth of a node = no of edges in path from root to that node. 


                                    1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                                  /\     
                                 9 10  
the height of left subtree is 2 and height of right sub tree is 1.
the width of 2 is 1 and height is 2,
 width of 5 is 2 and height is 1

the height of the root node will be height of max(leftsubtree,rightsubtree)+1

findHeight(root){
  if(root is NULL) return -1
  leftHeight <= findHeight(root->left)
  rightHeight <= findHeight(root->right)
  return max(leftHeight,rightHeight)
}


//finding minimum and maximum element in the binary search tree.


#include<stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#include<math.h>

struct bstNode{
    int data;
    struct bstNode *left;
    struct bstNode *right;
};

struct bstNode* getNewNode(int data){
    struct bstNode* newNode = (struct bstNode*)(malloc(sizeof(struct bstNode)));
    newNode->data = data;
    newNode->left=NULL;
    newNode->right=NULL;
    return newNode;
}

struct bstNode* insert(int data, struct bstNode* root){
    if(root==NULL){
        root = getNewNode(data);
    } else if(data <= root->data){
        root->left = insert(data,root->left);
    } else root->right = insert(data, root->right);
    return root;
}

bool search(int data, struct bstNode* root){
    if(root==NULL){
        return false;
    } else if(root->data==data){
        return true;
    } else if(data<=root->data){
        return search(data, root->left);
    } else return search(data,root->right);
}

int max(int a, int b){
    if(a>b){
        return a;
    } else return b;
}

int height(struct bstNode* root){
    if(root==NULL){
        return -1;
    }
    int p = max(height(root->left),height(root->right)) +1;
    printf("%d",p); //0 1 0 1 2
    return p;    
}

int main(){
    struct bstNode *root=NULL;
    root = insert(13, root);
    root = insert(9,root);
    root = insert(15,root);
    root = insert(7,root);
    root = insert(14,root);
    int heightOfTree = height(root);
    printf("height %d", heightOfTree);
}
        13
       /  \
      9   15
     /    /
    7    14


  
//tracing the algo!
l is -1
r is -1
max(l,r) is 0 
l is 0
r is -1
max(l,r) is 1 
l is -1
r is -1
max(l,r) is 0 
l is 0
r is -1
max(l,r) is 1 
l is 1
r is 1
max(l,r) is 2 
height 2
