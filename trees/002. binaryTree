Binary tree is the tree which can have atmost 2 children. left node is called left child and rihgt one is right child.


                                   1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                               \  /\     /
                                8 9 10 11  

we can say that left child of 4 is null and right child of 7 is null
and all other nodes that do no have child is lead node so we can say both right and left child are null.

               1
               /
              2
             /
            3
the above tree can also be called as binary tree.

Depth: how many edges are there above the node that is depth of a node
Height: how many edges are there below the node that is height of a node

 Node1 // depth = 0 and height = 2 => root node
  |
 / \
Node2 Node3 //depth = 1 and height = 1
|     |
Node4 Node5  //depth = 2 and height = 0  => leaf node```

strict/proper binary tree: each node can have either 2 or 0 children.
                                    1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                                  /\     
                                 9 10  

complete binary tree: all levels except possibly the last are completely filled and all nodes are as left as possible.
                                   1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                              /\ /      
                             8 9 10
there are three edges in the above tree and 4 nodes traversing until leaf path.


max no of nodes at level i is 2^i
the max no of nodes at root is 2^0 is 1 

if all the levels are filled then its perfect binaary tree.

maximum no of nodes in a binary tree with height 
h = 2^0+2^1 -----+2^h
  =2^(h+1)-1
  =2^levels - 1


height of bt with n node will be
n =2^h+1 -1
n+1=2^(h+1)
h = log2(n+1)-1
h=|log2(n)|


log2(15+1)-1
h=log2(16)-1
h=4-1=3

refer: 
https://www.cs.kent.edu/~durand/CS2/Notes/10_Binary_Trees/ds_treesB.html
link:
https://www.youtube.com/watch?v=H5JubkIy_p8

 24 23 22 21 20
    1  1  1  1two
+            1two
   -----------
 1  0  0  0  0two =  24 = 16

 10000two = 1111two + 1two

 10000two - 1two = 1111two
So,

 24  - 1 =  23 + 22 + 21 + 20
And, in general,

 2(d + 1) - 1 =  2d + 2d - 1 + ... + 21 + 20
In a complete binary tree of height d there will be at least 2d nodes. Levels through d - 1 form a full tree and there is at least 1 node in the next level (at the left).

balanced binary tree:
difference between height of left and right subtree for every node is not more than k(mostly 1)
=> height of left - height of right
height = no of edges in longest path from root to leaf.
heoght of an empty tree is -1
height of tree with 1 node is 0


                                   0
                                 /    \
                                2     1
                                /      /\
                               0      0  0
                              /\         /\  
                             0 0        0  0 

there are three edges in the above tree and 4 nodes traversing until leaf path.
height of lST is 1 and RST is -1 => 1-(-1)= 2

we can implement binary tree using:
a. dynamically created nodes.

struct node{
int data;
node* left;
node* right;
}

b. arrays
usuallt used for heaps.
we can store values in arrays for complete BT. 

                                   0
                                 /    \
                                1      2
                                /\     /\
                               3  4   5  6

for node at index i, 
left-child-index = 2i+1
right-child-index = 2i+2

this is true for only complete BT





