Binary tree is the tree which can have atmost 2 children. left node is called left child and rihgt one is right child.


                                   1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                               \  /\     /
                                8 9 10 11  

we can say that left child of 4 is null and right child of 7 is null
and all other nodes that do no have child is lead node so we can say both right and left child are null.

               1
               /
              2
             /
            3
the above tree can also be called as binary tree.

Depth: how many edges are there above the node that is depth of a node
Height: how many edges are there below the node that is height of a node

 Node1 // depth = 0 and height = 2 => root node
  |
 / \
Node2 Node3 //depth = 1 and height = 1
|     |
Node4 Node5  //depth = 2 and height = 0  => leaf node```

strict/proper binary tree: each node can have either 2 or 0 children.
                                    1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                                  /\     
                                 9 10  

complete binary tree: all levels except possibly the last are completely filled and all nodes are as left as possible.
                                   1
                                 /    \
                                2      3
                                /\     /\
                               4  5   6  7
                              /\ /      
                             8 9 10
there are 9 edges in the above tree, and the path from the root to the leaf nodes contains between 3 and 4 nodes

Path from 1 to 8: 1 → 2 → 4 → 8 (4 nodes).
Path from 1 to 6: 1 → 3 → 6 (3 nodes).


max no of nodes at level i is 2^i
the max no of nodes at root is 2^0 is 1 

if all the levels are filled then its perfect binaary tree.

maximum no of nodes in a binary tree with height 
h = 2^0+2^1 -----+2^h
  =2^(h+1)-1
  =2^levels - 1


height of bt with n node will be
n =2^h+1 -1
n+1=2^(h+1)
h = log2(n+1)-1
h=|log2(n)|


log2(15+1)-1
h=log2(16)-1
h=4-1=3

refer: 
https://www.cs.kent.edu/~durand/CS2/Notes/10_Binary_Trees/ds_treesB.html
link:
https://www.youtube.com/watch?v=H5JubkIy_p8

 2^4 2^3 2^2 2^1 2^0
    1  1  1  1two
+            1two
   -----------
 1  0  0  0  0two =  2^4 = 16

 10000two = 1111two + 1two (16=15+1) 

 10000two - 1two = 1111two
So,

 2^4  - 1 =  2^3 + 2^2 + 2^1 + 2^0
And, in general,^

 2^(d + 1) - 1 =  2^d + 2^d - 1 + ... + 2^1 + 2^0
In a complete binary tree of height d there will be at least 2^d nodes. Levels through d - 1 form a full tree and there is at least 1 
node in the next level (at the left).

balanced binary tree:
difference between height of left and right subtree for every node is not more than k(mostly 1 or any numner)
=> height of left - height of right
height = no of edges in longest path from root to leaf.
heoght of an empty tree is -1 (there is no edge nor nodes.)
height of tree with 1 node is 0 (for example  1  -> this has no edge at all so its 0 )


                                   0
                                 /    \
                                2     0
                                /      /\
                               0      0  0
                              /\         /\  
                             0 0        0  0 

(the above node values are the different between lst and rst) since it contains 2 it is not balanced bInARY TREE.  

there are three edges in the above tree and 4 nodes traversing until leaf path. (you count the height from the down)
height of LST of 2 is 1 and height of RST of 2 is is -1 => 1-(-1)= 2
height of LST of root node is 2 and height of RST of root node is 2 => 2-2 = 0

we can implement binary tree using:

a. dynamically created nodes.

struct node{
int data;
node* left;
node* right;
}

b. arrays
usually used for heaps.
we can store values in arrays for complete BT. 

                                   0
                                 /    \
                                1      2
                                /\     /\
                               3  4   5  6

for node at index i, 
left-child-index = 2i+1
right-child-index = 2i+2

this is true for only complete BT





