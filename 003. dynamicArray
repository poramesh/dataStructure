Declare a 2-dimensional array,arr, of n empty arrays. All arrays are zero indexed.
Declare an integer, lastAnswer, and initialize it to 0.

There are 2 types of queries, given as an array of strings for you to parse:

1. Query: 1 x y
    1. Let idx=((x+lastanswer)%n).
    2. Append the integer  to .
Query: 2 x y
    1. Let idx=((x+lastamswer)%n).
    2. Assign the value  to arr[idx][y%size(arr[idx])] to lastAnswer.
    3. Store the new value of  to an answers array.
Note:  + is the bitwise XOR operation, which corresponds to the ^ operator in most languages. .
Finally, size(arr[idx]) is the number of elements in arr[idx]

Function Description

Complete the dynamicArray function below.

dynamicArray has the following parameters:
- int n: the number of empty arrays to initialize in arr
- string queries[q]: query strings that contain 3 space-separated integers

Returns

int[]: the results of each type 2 query in the order they are presented

Input Format

The first line contains two space-separated integers,n, the size of arr to create, and q, the number of queries, respectively.
Each of the q subsequent lines contains a query string, queries[i].

Constraints
1<n,q<=10^5
0<=x,y<=10^9
It is guaranteed that query type 2 will never query an empty array or index.

Sample Input

2 5
1 0 5
1 1 7
1 0 3
2 1 0
2 1 1
Sample Output

7
3

solution:

def dynamicArray(n, queries):
    sequences = [[] for x in range(n)]
    answer = []
    lastAnswer = 0
    for query in queries:
        action, i, v = list(map(int, query))
        idx = (i^lastAnswer)%n
        if action == 1:
            sequences[idx].append(v)
        else:
            temp = sequences[idx]
            lastAnswer = sequences[idx][v%len(temp)]
            answer.append(lastAnswer)
    return answer

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    m = int(first_multiple_input[1])

    queries = []

    for _ in range(m):
        queries.append(list(map(int, input().rstrip().split())))

    result = arrayManipulation(n, queries)

    fptr.write(str(result) + '\n')

    fptr.close()
