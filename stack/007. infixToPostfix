conversion from infix to postfix:
A+B*C=> A+(B*C)=>A(BC*)+=>ABC*+
A+B*C-D*E => ABC*+DE*-
((A+B)*C-D)*E = AB+C*D-E*
A*(B+C)=>ABC+*

// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdbool.h>
#define max_size 50

int a[max_size];
int top=-1;

bool isOperand(char c){
    if(c>='A'&&c<='Z'||c>='a'&&c<='z'||c>='0'&&c<='9') return true;
    else return false;
}

bool isOperator(char c){
    if(c=='+'||c=='-'||c=='/'||c=='*') return true;
    else return false;
}
    
bool isHigherWeight(char s, char c){
    if( s=='*') return 1;
    else if(s=='/') return 1;
    else if(s=='+' && c=='+') return 1;
    else if(s=='+'&& c=='-') return 1;
    else if(s=='-'&& c=='+') return 1;
    else if(s=='-' && c=='-') return 1;
    else return 0;
    }



char* infixToPostfixExp(char exp[]){
    int n =strlen(exp);
    char* res = malloc(sizeof(char)*n+1);
    int j=0;
    for(int i=0;i<n;i++){
        if(exp[i]==' ' || exp[i] ==',') continue;
        else if(isOperand(exp[i])){
            res[j++]=exp[i];
        }else if(isOperator(exp[i])){
            while(top!=-1 && isHigherWeight(a[top],exp[i])){
                res[j++]=a[top];
                top--;
            } a[++top]=exp[i];
        } 
    }
    while(top!=-1){
        res[j++]=a[top];
        top--;
    }
    printf("%s",res);
    return res;

}

int main() {
    
    char c[40];
    printf("enter the expression \n");
    scanf("%[^\n]s",c);
    //A*(B+C)=>ABC+*
    //A*B+C=>AB*C+
     char* op = infixToPostfixExp(c);
    printf("\no/p is %s",op);
    return 0;
}
//A + B * C + D
//A + B * C



(or)


#include <stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack 
{
    char data;
    struct stack *link;
};
struct stack *top=NULL;
void push(char x)
{
    struct stack *temp=(struct stack*)malloc(sizeof(struct stack));
    temp->data=x;
    temp->link=NULL;
    temp->link=top;
    top=temp;
}
void pop()
{
    if(top==NULL) return;
    struct stack *temp=top;
    top=top->link;
    free(temp);
}
char top1()
{
    if(top==NULL) return 0;
    return top->data;
}
int isoperand(char c)
{
    if(c>=65 && c<=122) return 1;
    return 0;
}
int isoperator(char c)
{
    if(c=='+' || c=='*' || c=='-' || c=='/') return 1;
    return 0;
}
int topprior(char a,char x)
{
    if(top==NULL) return 0;
    else if(a=='*') return 1;
    else if(a=='/') return 1;
    else if(a=='+' && x=='-') return 1;
    else if(a=='-' && x=='+') return 1;
    return 0;
}
char* compute(char *A,int n)
{
    char arr[100];
    int j=0;
    for(int i=0;i<n;i++)
    {
        if(isoperand(A[i])>0) arr[j++]=A[i];
        else if(isoperator(A[i])>0)
        {
            if(topprior(top1(),A[i])>0)
            {
                while(top!=NULL)
                {
                    arr[j++]=top1(); pop();
                }
            }
            push(A[i]);
        }
    }
    while(top!=NULL)
    {
        arr[j++]=top1(); pop();
    }
    printf("Postfix:%s",arr);
}
void main()
{
    char arr[100];
    printf("Infix:");
    int n;    scanf("%s",arr);
    n=strlen(arr);
    compute(arr,n);
}
(or)
https://gist.github.com/mycodeschool/7867739
