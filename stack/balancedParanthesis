1. scan from left to right. 
2. if opening symbol, push it into a stack.
3. if closing symbol and top of the stack opening of same type then pop
4. should end with a empty stack.
// Online C compiler to run C program online
#include <stdio.h>
#include<string.h>
#include<stdbool.h>
#define max_size 50
int top=-1;
int a[max_size];

bool checkIfPair(char c,char a){
    if(c == ')' && a == '('){
        return 1;
    } else if (c == '}' && a == '{'){
        return 1;
    } else if(c ==']' && a == '['){
        return 1;
    } else return 0;
}
bool isParenthesisBalanced(char exp[]){
    int len = strlen(exp);
    for(int i=0;i<len;i++){
        if(exp[i]=='('||exp[i]=='{'||exp[i]=='['){
            a[++top]=exp[i];
        } else if(exp[i]==')'||exp[i]==']'||exp[i]=='}'){ 
            if(checkIfPair(exp[i],a[top])){
                a[top--];
            } else return 0;
        }
    }
    if(top==-1){
        return 1;
    } else return 0;

}
//(){}{[}]


int main() {
    char exp[30];
    printf("enter the character");
    scanf("%s",exp);
    
    bool trueOrFalse = isParenthesisBalanced(exp);
    
    if(trueOrFalse){
        printf("it is balanced :) ");
    }
    else printf("it is not balanced :(");
    return 0;
}

