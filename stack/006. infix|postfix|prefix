order of operations: 
1. parenthesis 
2. exponents (right to left) x^2^4 
3. multiplication and division(left to right) 
4. addition and subtraction(left to right)

infix:<operand><operator><operand>
postfix: <operand><operand><operator>
prefix: <operator><operand><operand>

postfix:
a*b+c*d-e
{(a*b)+(c*d)}-e
{(ab*)+(cd*)}-e
{(ab*)(cd*)+}-e
{(ab*)(cd*)+}e-
ab*cd*+e-
2 3*5 4*+9 = 17

prefix: 
(2*3)+(5*4)-9
*(2 3)+*(5 4)-9
+*2 3*5 4-9
-+*2 3 * 5 4 9
-+*ab*cde
-+*2 3*5 4 9 => 17 here we go on from the right!


more example: https://runestone.academy/ns/books/published/pythonds/BasicDS/InfixPrefixandPostfixExpressions.html 
remember to use your brain to apply order of operations.

--------
// Online C compiler to run C program online
#include <stdio.h>
#include<stdlib.h>
#include<string.h>
#include<stdbool.h>

#define max_size 50

int a[max_size];
int top=-1;

bool isOperator(char c){
    if(c=='+') return 1;
    else if(c=='-') return 1;
    else if(c=='*') return 1;
    else if (c=='/') return 1;
    else return 0;
}
bool isDigit(char c){
    if(c>='0'&&c<='9'){
        return 1;
    } else return 0;
}
int performOperation(int operand1, int operand2, char opera){
    if(opera=='+') return operand1+operand2;
    else if(opera=='-') return operand1-operand2;
    else if(opera=='*') return operand1*operand2;
    else if(opera=='/') return operand1/operand2;
}

int evaluateExp(char exp[]){
    int n =strlen(exp);
    //printf("exp: %s \n ",exp);
    for(int i=0;i<n;i++){
        //printf("%c\n",exp[i]);
        
        if(exp[i]==' '|| exp[i]==',') continue;
        
        if(isOperator(exp[i])){
            int operand2 = a[top]; 
            top--;
            int operand1 = a[top];
            top--;
            int ans = performOperation(operand1,operand2,exp[i]);
            a[++top]=ans;
            printf("a[top]=%d,and=%d,top=%d\n",a[top],ans,top);
        }
        else if (isDigit(exp[i])){
            int operand = 0;
            while(i<n && isDigit(exp[i])){
                operand = operand*10+exp[i]-'0';
                i++;
            } 
            a[++top]=operand;
        }
    }
    return a[top];
}

int main() {
    
    char c[40];
    printf("enter the expression \n"); //(2*3)+(5*4)-9
    scanf("%s",c);
    //scanf("%[^\n]s",c);


    int op = evaluateExp(c);
    printf("solution is %d",op); //9
    return 0;
}



----------------------------

#include<iostream>
#include<stack>
#include<string>

using namespace std;

// Function to evaluate Postfix expression and return output
int EvaluatePostfix(string expression);

// Function to perform an operation and return output. 
int PerformOperation(char operation, int operand1, int operand2);

// Function to verify whether a character is operator symbol or not. 
bool IsOperator(char C);

// Function to verify whether a character is numeric digit. 
bool IsNumericDigit(char C);

int main() 
{
	string expression; 
	cout<<"Enter Postfix Expression \n";
	getline(cin,expression);
	int result = EvaluatePostfix(expression);
	cout<<"Output = "<<result<<"\n";
}

// Function to evaluate Postfix expression and return output
int EvaluatePostfix(string expression)
{
	// Declaring a Stack from Standard template library in C++. 
	stack<int> S;

	for(int i = 0;i< expression.length();i++) {

		// Scanning each character from left. 
		// If character is a delimitter, move on. 
		if(expression[i] == ' ' || expression[i] == ',') continue; 

		// If character is operator, pop two elements from stack, perform operation and push the result back. 
		else if(IsOperator(expression[i])) {
			// Pop two operands. 
			int operand2 = S.top(); S.pop();
			int operand1 = S.top(); S.pop();
			// Perform operation
			int result = PerformOperation(expression[i], operand1, operand2);
			//Push back result of operation on stack. 
			S.push(result);
		}
		else if(IsNumericDigit(expression[i])){
			// Extract the numeric operand from the string
			// Keep incrementing i as long as you are getting a numeric digit. 
			int operand = 0; 
			while(i<expression.length() && IsNumericDigit(expression[i])) {
				// For a number with more than one digits, as we are scanning from left to right. 
				// Everytime , we get a digit towards right, we can multiply current total in operand by 10 
				// and add the new digit. 
				operand = (operand*10) + (expression[i] - '0'); 
				i++;
			}
			// Finally, you will come out of while loop with i set to a non-numeric character or end of string
			// decrement i because it will be incremented in increment section of loop once again. 
			// We do not want to skip the non-numeric character by incrementing i twice. 
			i--;

			// Push operand on stack. 
			S.push(operand);
		}
	}
	// If expression is in correct format, Stack will finally have one element. This will be the output. 
	return S.top();
}

// Function to verify whether a character is numeric digit. 
bool IsNumericDigit(char C) 
{
	if(C >= '0' && C <= '9') return true;
	return false;
}

// Function to verify whether a character is operator symbol or not. 
bool IsOperator(char C)
{
	if(C == '+' || C == '-' || C == '*' || C == '/')
		return true;

	return false;
}

// Function to perform an operation and return output. 
int PerformOperation(char operation, int operand1, int operand2)
{
	if(operation == '+') return operand1 +operand2;
	else if(operation == '-') return operand1 - operand2;
	else if(operation == '*') return operand1 * operand2;
	else if(operation == '/') return operand1 / operand2;

	else cout<<"Unexpected Error \n";
	return -1; 
}

-------------
int n[10];
if(c>='0' && c<='9')
++n[c-'0']

In C, '0' is an integer whose value represents the digit zero as a character, not the value 0, which would be the null character. 
Other answers have omitted this, but it's important to note that the C language mandates that the decimal digits have consecutive values,
so that if c is a digit, c-'0' is the numeric value of that digit, i.e.

'0'-'0' = 0
'1'-'0' = 1
'2'-'0' = 2

'0' and '9' are of int types. Their values are 48 and 57 respectively (since 48 and 57 are ASCII values of characters '0' and '9').

So you are probably holding in n an array for counting digits.

So this expression (if you are storing digit characters on c):

++n[c-'0'];

------
scanf family functions support scanset specifiers which are represented by %[]. 
Inside scanset, we can specify single character or range of characters. While processing scanset,
scanf will process only those characters which are part of scanset. We can define scanset by putting characters inside square brackets.
Please note that the scansets are case-sensitive.

We can also use scanset by providing comma in between the character you want to add.

example: scanf(%s[A-Z,_,a,b,c]s,str);

printf("Enter a string with spaces: ");
scanf("%[^\n]s", str);
