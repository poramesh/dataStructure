
Recursion:

This is an extremely important algorithmic concept that involves splitting a problem into two parts: a base case and a recursive case. 
The problem is divided into smaller subproblems which are then solved recursively until such time as they are small enough and meet
some base case; once the base case is met, the solutions for each subproblem are combined and their result is the answer to the entire problem.

If the base case is not met, the function's recursive case calls the function again with modified values. The code must be structured in
such a way that the base case is reachable after some number of iterations, meaning that each subsequent modified value should bring you
closer and closer to the base case; otherwise, you'll be stuck in the dreaded infinite loop!

It's important to note that any task that can be accomplished recursively can also be performed iteratively (i.e., through a
sequence of repeatable steps). Recursive solutions tend to be easier to read and understand than iterative ones, but there are often
performance drawbacks associated with recursive solutions that you're going to want to evaluate on a case-by-case basis. Typically, we 
use recursion when each recursive call significantly reduces the size of the problem (e.g., if we can halve the dataset during each recursive call). 
Regardless of the advisability of recursively solving a problem, it's extremely important to practice and understand how to recursively solve problems.

example:

Two-space seprated integers to be multiplied.

import java.util.*;

class Solution {
    // Multiply 'n' by 'k' using addition:
    private static int nTimesK(int n, int k) {
        // Print current value of n
        System.out.println("n: " + n);

        // Recursive Case
        if(n > 1) { 
            return k + nTimesK(n - 1, k);
        }
        // Base Case n = 1
        else { 
            return k;
        }
    }
    public static void main(String[] args) {
    	Scanner scanner = new Scanner(System.in);
        int result = nTimesK(scanner.nextInt(), scanner.nextInt());
        scanner.close();
        System.out.println("Result: " + result);
    }
}

i/p: 4 3
o/p: 12

4 times 3
3
3+3
3+3+3
3+3+3+3


nTimesK(4,3) -> 3 + nTimesK(3,3) -> 3 + nTimesK(2,3) -> 3 + nTimesK(1,3) = (base(1,3) = return 3
nTimesK(4,3) -> 3 + nTimesK(3,3) -> 3 + nTimesK(2,3) <-6
nTimesK(4,3) -> 3 + nTimesK(3,3) <- 9
nTimesK(4,3) <- 12

More example:


'use strict';
process.stdin.on('data', function (data) {
    let input = String(data).split(new RegExp("[\n ]+"));
    main(+(input[0]), +(input[1]));
});
/**** Ignore above this line. ****/

function main(factN, fibN) {
    var math = {
        // Declare the factorial property
        factorial: 
            // Declare the function as the property's value
            function factorial(n) {
                if (n > 1) {
                    return n * factorial(n - 1);
                }
                // Returns 1 if n <= 1
                return 1;
            }
    };
    fib = function fibonacci(n){
        if (n > 2) {
            return fibonacci(n - 1) + fibonacci(n - 2);
        }
        else if (n < 1) {
            return 0;
        }
        // else, return 1
        return 1;
    }

   
    console.log(math.factorial(factN));
    console.log(fib(fibN));

}


Factorial of a numnber using recursion:

fact(5) -> 5 * fact(4) -> 4 * fact(3) -> 3 * fact(2) -> 2 * fact(1)  (Base Case:fact(1)=1)
fact(5) -> 5 * fact(4) -> 4 * fact(3) -> 3 * fact(2) <- 2
fact(5) -> 5 * fact(4) -> 4 * fact(3) <- 6 
fact(5) -> 5 * fact(4) <- 24 
fact(5) = 120 
so factorial of 5 is 120.


fibnoccci:
f(0): 0
f(1): 1
F(2): 0+1 =1
F(3): 1+1=2
F(4): 1+2=3
F(5): 2+3=5
F(6): 3+5=8

               fibonacciRecursive(6)
              /                     \
     fibonacciRecursive(5)      fibonacciRecursive(4)
     /            \               /          \
fibonacci(4)  fibonacci(3)  fibonacci(3)  fibonacci(2)
  /      \       /   \           /    \      
f(3)  f(2)   f(2) f(1)      f(2)  f(1)   
 /  \     |      |     |         |     |      
f(2) f(1)  1      1   1         1     1  
 |   |
 1   1

2. Using an Array (Bottom-Up Dynamic Programming)

                                                                                      
                                                                                      
You can build the Fibonacci sequence iteratively and store all computed values in an array.

                                                                                      
function fibonacciArray(n) {
    if (n < 1) return 0; 
    if (n === 1 || n === 2) return 1; 

    const fib = [0, 1, 1]; // Initialize the array with base cases

    for (let i = 3; i <= n; i++) {
        fib[i] = fib[i - 1] + fib[i - 2]; // Fill the array
    }

    return fib[n]; // Return the nth Fibonacci number
}

// Example usage:
console.log(fibonacciArray(6)); // Output: 8




in python:

def fibonacci_array(n):
    if n < 1:
        return 0
    if n == 1 or n == 2:
        return 1

    fib = [0, 1, 1]  # Initialize the list with base cases

    for i in range(3, n + 1):
        fib.append(fib[i - 1] + fib[i - 2])  # Fill the list

    return fib[n]  # Return the nth Fibonacci number

# Example usage:
print(fibonacci_array(6))  # Output: 8

