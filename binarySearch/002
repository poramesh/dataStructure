finding occurence or last occurence

2  4  10  10  10  18  20
0  1  2   3   4   5   6

which 10 do we have to return?  index 2, 3 or 4?
when we perform bs , it shall return the one which is in the mid, irrespective of it being first or last occurence.
it returns 2 with normal bs implemetation.

the binary search we implemented will find the first occurence of the 10 and exist the condition
so in order to find the last occurence, we can make some changes.

int bs(int a[],int n, int x){
while (low<=high)
{
    int low=0, high = n-1;
    int mid = (low+high)/2; or int mid = low + (high -low) /2; (low+high) may overflow
    if(x==A[mid]) return mid;
    else if(x < A[mid]) high = mid-1;
    else low = mid+1;
}
return -1;
}

what we do to the mid condition is that, we dont return the mid element, instead we
result = mid, low = mid+1, to find the last occurence. 
result = mid, high= mid-1 to find the first occurence.


#include <stdio.h>

int firstOccurrence(int a[], int n, int x) {
    int low = 0, high = n - 1, result = -1;
    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (a[mid] == x) {
            result = mid;
            high = mid - 1; // keep checking to the left, if we want last occurence then we do mid + 1
            printf("%d\n",mid); 
        }
        else if (x < a[mid])
            high = mid - 1;
        else
            low = mid + 1;
    }
    return result;
}

int main() {
    int A[] = {1, 2, 2, 2, 3, 4}; // use curly braces, not square brackets
    int n = sizeof(A) / sizeof(A[0]); // find length of array
    int x = 2;
    int result = firstOccurrence(A, n, x); // correct function name and call
    printf("First occurrence of %d is at index: %d\n", x, result);
    return 0;
}

Example with A = [1, 2, 2, 2, 3, 4] and x = 2:

Step  low   high  mid  A[mid]  result	 Action
1	  0	    5	  2    2	   2	     Found 2 at index 2, move left (high = mid - 1)
2	  0	    1	  0	   1	   2	     1 is less than 2, move right (low = mid + 1)
3	  1	    1	  1	   2	   1	     Found 2 at index 1, move left (high = mid - 1)
4	  1	    0	  0	   1	   1	     No more valid indices, exit loop.


Ologn ----

____________________________________________
find count og an element in a sorted list
____________________________________________


A = 1   1  3  3  5  5  5  5  5  9  9  11
    0   1  2  3  4  5  6  7  8  9  10 11

how many 5? - 5
how many 2? - 0
how many x? 


find count(A,n,x)
