Given a circularly sorted array (i.e., a sorted array that has been rotated), determine whether a target element X exists in the array.

Example:
Sorted array → [1, 2, 3, 4, 5, 6, 7, 8]
After 4 rotations → [5, 6, 7, 8, 1, 2, 3, 4]

Brute Force Approach: Linear Search
Time Complexity: O(N)
Just go element by element and look for X.
Disadvantage: Doesn’t use the "sorted" property.

Optimized Approach: Binary Search
Use a modified binary search by leveraging the fact that:
In a circularly sorted array with distinct elements, at least one half of the array is always sorted.



def circular_array_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid

        # Case 2: Right half is sorted
        if arr[mid] <= arr[high]:
            if arr[mid] < target <= arr[high]:
                low = mid + 1
            else:
                high = mid - 1

        else:
            if arr[low] <= target < arr[mid]:
                high = mid - 1
            else:
                low = mid + 1

    return -1

# Example usage
if __name__ == "__main__":
    arr = [5, 6, 7, 8, 1, 2, 3, 4]
    x = int(input("Enter the number to search: "))
    result = circular_array_search(arr, x)

    if result != -1:
        print(f"Element {x} found at index {result}.")
    else:
        print(f"Element {x} not found in the array.")


