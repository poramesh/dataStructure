Given a circularly sorted array (i.e., a sorted array that has been rotated), determine whether a target element X exists in the array.

Example:
Sorted array → [1, 2, 3, 4, 5, 6, 7, 8]
After 4 rotations → [5, 6, 7, 8, 1, 2, 3, 4]

Brute Force Approach: Linear Search
Time Complexity: O(N)
Just go element by element and look for X.
Disadvantage: Doesn’t use the "sorted" property.

Optimized Approach: Binary Search
Use a modified binary search by leveraging the fact that:
In a circularly sorted array with distinct elements, at least one half of the array is always sorted.

arr = [15, 18, 19, 20, 3, 6, 12]


now we are a[3] = 20, and we have got to find 3, so we check 20 is less than 12? no so it is not.
now we check if a[low] =15 is less than 3 , it is not so , now we see starting is also not started so we make the low = 4, high =6
here 5 is the mid a[5]=6 , and 6 is less than 12 and 6 is greater than 3 so it goes to left. so high becomes mid-1 => low =4, high=5
here mid = 4 arr[4] =3, the array is found so it returns.


ALWYAS TRY TO SOLVE IT BY POSITIVE TEST CASES ONCE YOU KNOW HOW TO SOLVE
#arr = [1,2,3,4,5,6]
when we have to find 5 we check if mid of right is sorted 3 is less than 6? so we check if our target is within that range. 
and if it is in that range what do we do? keep building the logic aise ee. 


def circular_array_search(arr, target):
    low = 0
    high = len(arr) - 1

    while low <= high:
        mid = (low + high) // 2

        if arr[mid] == target:
            return mid

        # Case 2: Right half is sorted
        if arr[mid] <= arr[high]:
            if arr[mid] < target <= arr[high]:
                low = mid + 1
            else:
                high = mid - 1

        else:
            if arr[low] <= target < arr[mid]:
                high = mid - 1
            else:
                low = mid + 1

    return -1

# Example usage
if __name__ == "__main__":
    arr = [5, 6, 7, 8, 1, 2, 3, 4]
    x = int(input("Enter the number to search: "))
    result = circular_array_search(arr, x)

    if result != -1:
        print(f"Element {x} found at index {result}.")
    else:
        print(f"Element {x} not found in the array.")


