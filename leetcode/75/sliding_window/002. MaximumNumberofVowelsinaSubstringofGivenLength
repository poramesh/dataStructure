
Given a string s and an integer k, return the maximum number of vowel letters in any substring of s with length k.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: s = "abciiidef", k = 3
Output: 3
Explanation: The substring "iii" contains 3 vowel letters.

Example 2:

Input: s = "aeiou", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.

Example 3:

Input: s = "leetcode", k = 3
Output: 2
Explanation: "lee", "eet" and "ode" contain 2 vowels.
 

Constraints:

1 <= s.length <= 105
s consists of lowercase English letters.
1 <= k <= s.length



PASSED 102/106 test cases haha 

class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        su = 0
        for i in range(len(s)-k+1):
            ch = s[i:i+k]
            su = max(su, sum(1 for cha in ch if cha in "aeiou"))
        return su

(or)

class Solution:
    def maxVowels(self, s: str, k: int) -> int:

        max_sum = count = sum(1 for i in range(k) if s[i] in "aeiou")   

        for i in range(k,len(s)):

            if s[i-k] in "aeoiu": count-=1
            if s[i] in "aeiou": count+=1
            max_sum = max(count,max_sum)


        return max_sum


(or)

class Solution:
    def maxVowels(self, s: str, k: int) -> int:
        ans= 0            
        currCount=0
        vowels= "aeiou"
      
        for i in range(len(s)):
            if i >= k:
                if s[i-k] in vowels:
                    currCount -= 1
            if s[i] in vowels:
                currCount += 1
            ans = max(currCount, ans)
        return ans


(or)

int vowels[26] = {1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1};
int maxVowels(string s, int k) {
    int max_vow = 0;
    for (auto i = 0, cur_vow = 0; i < s.size(); ++i) {
        cur_vow += vowels[s[i] - 'a'];
        if (i >= k)
            cur_vow -= vowels[s[i - k] - 'a'];
        max_vow = max(max_vow, cur_vow);
    }
    return max_vow;
}
            
