
Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.

 

Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.



Translation:
Find the longest subarray with at most K zeros.

 [0, 0,  1, 1,  1,  0,  0, 0, 0, 0, 1  , 0 , 1 ,0  ,0 , 1, 1]
  0  1   2  3   4   5  6   7  8  9 10  11  12  13  14  15 16  
k=2, len =  16

num[ 0 ]: 0     nums[ 0 ]: 0    k: 1    j: 0   i: 0
num[ 1 ]: 0     nums[ 0 ]: 0    k: 0    j: 1   i: 0
num[ 2 ]: 1     nums[ 0 ]: 0    k: 0    j: 2   i: 0
num[ 3 ]: 1     nums[ 0 ]: 0    k: 0    j: 3   i: 0
num[ 4 ]: 1     nums[ 0 ]: 0    k: 0    j: 4   i: 0
num[ 5 ]: 0     nums[ 1 ]: 0    k: 0    j: 5   i: 1
num[ 6 ]: 0     nums[ 2 ]: 1    k: 0    j: 6   i: 2
num[ 7 ]: 0     nums[ 3 ]: 1    k: -1    j: 7   i: 3
num[ 8 ]: 0     nums[ 4 ]: 1    k: -2    j: 8   i: 4
num[ 9 ]: 0     nums[ 5 ]: 0    k: -3    j: 9   i: 5
num[ 10 ]: 1     nums[ 6 ]: 0    k: -2    j: 10   i: 6
num[ 11 ]: 0     nums[ 7 ]: 0    k: -2    j: 11   i: 7
num[ 12 ]: 1     nums[ 8 ]: 0    k: -1    j: 12   i: 8
num[ 13 ]: 0     nums[ 9 ]: 0    k: -1    j: 13   i: 9
num[ 14 ]: 0     nums[ 10 ]: 1    k: -1    j: 14   i: 10
num[ 15 ]: 1     nums[ 11 ]: 0    k: -1    j: 15   i: 11
num[ 16 ]: 1     nums[ 12 ]: 1    k: 0    j: 16   i: 12


WE ARE BASICALLY KEEPING THE SAME WINDOW UNTIL WE FIND THE BIGGER LENGTH.




[0, 0,  1, 1,  1,  0,  0, 0, 0, 0, 1  , 0 , 1 ,0  ,0 , 1, 1,1,1,1,1,1]


num[ 0 ]: 0     nums[ 0 ]: 0    k: 1    j: 0   i: 0
num[ 1 ]: 0     nums[ 0 ]: 0    k: 0    j: 1   i: 0
num[ 2 ]: 1     nums[ 0 ]: 0    k: 0    j: 2   i: 0
num[ 3 ]: 1     nums[ 0 ]: 0    k: 0    j: 3   i: 0
num[ 4 ]: 1     nums[ 0 ]: 0    k: 0    j: 4   i: 0
num[ 5 ]: 0     nums[ 1 ]: 0    k: 0    j: 5   i: 1
num[ 6 ]: 0     nums[ 2 ]: 1    k: 0    j: 6   i: 2
num[ 7 ]: 0     nums[ 3 ]: 1    k: -1    j: 7   i: 3
num[ 8 ]: 0     nums[ 4 ]: 1    k: -2    j: 8   i: 4
num[ 9 ]: 0     nums[ 5 ]: 0    k: -3    j: 9   i: 5
num[ 10 ]: 1     nums[ 6 ]: 0    k: -2    j: 10   i: 6
num[ 11 ]: 0     nums[ 7 ]: 0    k: -2    j: 11   i: 7
num[ 12 ]: 1     nums[ 8 ]: 0    k: -1    j: 12   i: 8
num[ 13 ]: 0     nums[ 9 ]: 0    k: -1    j: 13   i: 9
num[ 14 ]: 0     nums[ 10 ]: 1    k: -1    j: 14   i: 10
num[ 15 ]: 1     nums[ 11 ]: 0    k: -1    j: 15   i: 11
num[ 16 ]: 1     nums[ 12 ]: 1    k: 0    j: 16   i: 12
num[ 17 ]: 1     nums[ 12 ]: 1    k: 0    j: 17   i: 12
num[ 18 ]: 1     nums[ 12 ]: 1    k: 0    j: 18   i: 12
num[ 19 ]: 1     nums[ 12 ]: 1    k: 0    j: 19   i: 12
num[ 20 ]: 1     nums[ 12 ]: 1    k: 0    j: 20   i: 12
num[ 21 ]: 1     nums[ 12 ]: 1    k: 0    j: 21   i: 12

Explanation
For each A[j], try to find the longest subarray.
If A[i] ~ A[j] has zeros <= K, we continue to increment j.
If A[i] ~ A[j] has zeros > K, we increment i (as well as j).



Window Shrinking:

As the right pointer j expands the window by iterating through nums, each time a 0 is encountered, you decrement k, which 
represents how many zeroes you can flip to 1 (allowed flips).

When k becomes negative (i.e., the window contains more than k zeroes), you need to "shrink" the window from the left to 
restore a valid state. This is where i comes in.

Incrementing i:

If the window contains more than k zeroes (k < 0), incrementing i effectively removes elements from the left 
side of the window, making it smaller.


If nums[i] is 0:

You are "forgetting" about this zero because it's no longer in the window. As a result, the count of zeroes in the window decreases,
which effectively means you can now handle one more zero. Therefore, you increment k because the window can now accommodate one additional zero if needed.

If nums[i] is 1:

Removing a 1 doesnâ€™t affect the count of zeroes in the window, so k remains unchanged.

class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        i = 0
        for j in range(len(nums)):
            if(nums[j]==0): k-=1
            if(k<0): 
                if nums[i]==0:
                    k+=1
                i+=1

        return j-i+1

(or)


def longestOnes(self, A, K):
        i = 0
        for j in xrange(len(A)):
            K -= 1 - A[j]
            if K < 0:
                K += 1 - A[i]
                i += 1
        return j - i + 1
