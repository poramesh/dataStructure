Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.

Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].

Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:

        i = 0
        k=1
        res =0
        for j in range(len(nums)):
            if(nums[j] == 0 ): 
                k-=1
            while(k<0):
                if(nums[i]==0):
                    k+=1      
                i+=1
            res = max(res,j-i)
            print("1st iteration:", i,j,k,res)

        
        return res


[Input: nums = [0,1,1,1,0,1,1,0,1]]
1st iteration: 0 0 0 0
2st iteration: 0 1 0 1
3st iteration: 0 2 0 2
4st iteration: 0 3 0 3
5st iteration: 1 4 0 3
6st iteration: 1 5 0 4
7st iteration: 1 6 0 5
8st iteration: 5 7 0 5
9st iteration: 5 8 0 5

(or)


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:

        i = 0
        k=1
        res =0
        for j in range(len(nums)):
            if(nums[j] == 0 ): 
                k-=1

            if(k<0):
                if nums[i]==0:
                    k+=1
                i+=1
            print(i,j,k)    
        
        return j-i

0 0 0
0 1 0
0 2 0
0 3 0
1 4 0
1 5 0
1 6 0
2 7 -1
3 8 -1



(or)



[Input: nums = [0,1,1,1,0,1,1,0,1]]

var longestSubarray = function (nums) {
  let i = 0;
  let j = 1;
  let zeroes = nums[i] === 0 ? 1 : 0; // number of zeroes in our window
  let max = -1;

  while (j < nums.length) {
    if (nums[j] === 0) {
      zeroes++; // increment the number of zeroes encountered.
      
      // now we only want one zero in our window, so increment i,
     // i.e. slide the window by incrementing i (the window is actually getting smaller,
     // but you get the point).
      while (zeroes > 1) {
        if (nums[i++] === 0) {
          zeroes--;
        }
      }
    }

    max = Math.max(max, j - i);
    j++;
  }

  return max;
};
