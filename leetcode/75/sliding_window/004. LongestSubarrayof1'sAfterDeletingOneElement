Given a binary array nums, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array. Return 0 if there is no such subarray.

Example 1:

Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.

Example 2:

Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].

Example 3:

Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:

        i = 0
        k=1
        res =0
        for j in range(len(nums)):
            if(nums[j] == 0 ): 
                k-=1
            while(k<0):
                if(nums[i]==0):
                    k+=1      
                i+=1
            res = max(res,j-i)
            print("1st iteration:", i,j,k,res)

        
        return res

0st iteration: i=0  j=0  k=0  res=0
[0, 1, 1, 1, 0, 1, 1, 0, 1]]
i,j

1st iteration: i= 0  j= 1  k= 0  res= 1  j-i= 1

[0, 1, 1, 1, 0, 1, 1, 0, 1]
i   j

2nd iteration: i= 0  j= 2  k= 0  res= 2  j-i= 2

[0, 1, 1, 1, 0, 1, 1, 0, 1]
i      j

3rd iteration: i= 0  j= 3  k= 0  res= 3  j-i= 3

[0, 1, 1, 1, 0, 1, 1, 0, 1]
i         j

4th iteration: i= 1  j= 4  k= 0  res= 3  j-i= 3

[0, 1, 1, 1, 0, 1, 1, 0, 1]
    i        j

while k<0
here comes that sitation: k becomes = -1 and i is incremeneted, since nums[i] is 0 k becomes 0


5th iteration: i= 1  j= 5  k= 0  res= 4  j-i= 4

[0, 1, 1, 1, 0, 1, 1, 0, 1]
    i           j

6th iteration: i= 1  j= 6  k= 0  res= 5  j-i= 5

[0, 1, 1, 1, 0, 1, 1, 0, 1]
    i              j


7th iteration: i= 5  j= 7  k= 0  res= 5  j-i= 2

while comes into the picture, k is -1

[0, 1, 1, 1, 0, 1, 1, 0, 1]
       i              j

[0, 1, 1, 1, 0, 1, 1, 0, 1]
          i           j

now k becomes 0, since it encounters nums[i]=0 and it increments to the next position:
[0, 1, 1, 1, 0, 1, 1, 0, 1]
             i        j  

[0, 1, 1, 1, 0, 1, 1, 0, 1]
                i     j

[0, 1, 1, 1, 0, 1, 1, 0, 1]
                i     j


8th iteration: i= 5  j= 8  k= 0  res= 5  j-i= 3

[0, 1, 1, 1, 0, 1, 1, 0, 1]
                i        j





(or)


class Solution:
    def longestSubarray(self, nums: List[int]) -> int:

        i = 0
        k=1
        for j in range(len(nums)):
            if(nums[j] == 0 ): 
                k-=1

            if(k<0):
                if nums[i]==0:
                    k+=1
                i+=1
            print(i,j,k)    
        
        return j-i

0 0 0
0 1 0
0 2 0
0 3 0
1 4 0
1 5 0
1 6 0
2 7 -1
3 8 -1


