Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

         5
       / \
      4   8
     /   / \
    11  13  4
   /  \      \
  7    2      1


if the sum is 22:

o/p: 3


5
t 22
4
t 17
11
t 13
7
t 2
2
t 2
target: 2
8
t 17
13
t 9
4
t 9
5
t 5
target: 5
1
t 5
4
t 22
11
t 18
7
t 7
target: 7
2
t 7
11
t 22
7
t 11
2
t 11
7
t 22
2
t 22
8
t 22
13
t 14
4
t 14
5
t 10
1
t 10
13
t 22
4
t 22
5
t 18
1
t 18
5
t 22
1
t 22


we gottta consider the entire path in the tree so we are not returning 




# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root, target):
     
        self.numOfPaths = 0
        self.dfs(root, target)
        return self.numOfPaths
    
    def dfs(self, node, target):
        if node is None:
            return 
        self.test(node, target)
        self.dfs(node.left, target)
        self.dfs(node.right, target)
        
    def test(self, node, target):
        if node is None:
            return
        print(node.val)
        print("t" , target)
        if node.val == target:
            print("target:",target)
            self.numOfPaths += 1
            
        self.test(node.left, target-node.val)
        self.test(node.right, target-node.val)


3 4 5 

and target is 12

12-3 =>9 =>9-4 =>5 ? yes


