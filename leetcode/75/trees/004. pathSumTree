Given the root of a binary tree and an integer targetSum, return the number of paths where the sum of the values along the path equals targetSum.

The path does not need to start or end at the root or a leaf, but it must go downwards (i.e., traveling only from parent nodes to child nodes).

         5
       / \
      4   8
     /   / \
    11  13  4
   /  \      \
  7    2      1


if the sum is 22:

o/p: 3

Now starting at node 5:
dfs(node=5, target=22)
Call test(node=5, target=22)

Node is 5
Current node value = 5
Is 5 == 22? No, so continue.
Go left to node 4, and reduce target:
New target = 22 - 5 = 17
Call test(node=4, target=17)

Node is 4
Is 4 == 17? No, so continue.
Go left to node 11, reduce target:
New target = 17 - 4 = 13
Call test(node=11, target=13)

Node is 11
Is 11 == 13? No, so continue.
Go left to node 7, reduce target:
New target = 13 - 11 = 2
Call test(node=7, target=2)

Node is 7
Is 7 == 2? No, so continue.
Go left → None, return.
Go right → None, return.

Back to node 11, now go right to node 2 with target 2.
(From node 11 → right child node 2)
Call test(node=2, target=2)

Node is 2
Is 2 == 2? YES!!
We found a valid path!
Increase self.numOfPaths += 1
Then:
Go left → None, return.
Go right → None, return.

Back to node 4, now go right (which is None), so nothing happens.
Back to node 5, now go right to node 8, with target 22.
Similarly, test(node=8, target=17) will happen, and exploration continues.






# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def pathSum(self, root, target):
     
        self.numOfPaths = 0
        self.dfs(root, target)
        return self.numOfPaths
    
    def dfs(self, node, target):
        if node is None:
            return 
        self.test(node, target)
        self.dfs(node.left, target)
        self.dfs(node.right, target)
        
    def test(self, node, target):
        if node is None:
            return
        if node.val == target:
            print("target:",target)
            self.numOfPaths += 1
            
        self.test(node.left, target-node.val)
        self.test(node.right, target-node.val)


3 4 5 

and target is 12

12-3 =>9 =>9-4 =>5 ? yes




we are not returning as soon as target node is met cause of test cases liek this?

[1,-2,-3,1,3,-2,null,-1]
target sum = -1

total = 4 

         1
       /   \
     -2     -3
     / \    /
    1   3 -2
   /
 -1


        5
       / \
      4   8
     /   / \
    11  13  4
   /  \      \
  7    2      1


class Solution(object):
    def pathSum(self, root, target):
        self.result = 0
        cache = {0:1} //ensure if the root node and target is 0, it adds on the result
        
        # recursive to get result
        self.dfs(root, target, 0, cache)
        
        # return result
        return self.result
    
    def dfs(self, root, target, currPathSum, cache):
        if root is None:
            return  
        currPathSum += root.val
        oldPathSum = currPathSum - target

        self.result += cache.get(oldPathSum, 0)
        cache[currPathSum] = cache.get(currPathSum, 0) + 1

        self.dfs(root.left, target, currPathSum, cache)
        self.dfs(root.right, target, currPathSum, cache)
        cache[currPathSum] -= 1



Logic Explanation

The key idea is to use a cumulative sum (currPathSum) from the root to the current node. If there exists a previous
prefix sum in the path (stored in cache) such that subtracting this prefix sum from currPathSum equals 
the target, then a path with the target sum exists between those two points.

Here’s how the code works step-by-step:

Cumulative Path Sum (currPathSum): As we traverse the tree, we calculate a cumulative sum from the root to each node.

Finding Target Paths with oldPathSum: For each node, we check if there's a previous cumulative path sum 
(oldPathSum) that would make the difference between currPathSum and oldPathSum equal to the target.

oldPathSum = currPathSum - target
If oldPathSum is found in cache, it means there’s a path from that previous sum up to the current node that has the target sum.

Updating the Cache:

Add the currPathSum to cache, which tracks how many times this cumulative sum has been seen.
When we return from a node (after processing its left and right subtrees), decrement the count of 
currPathSum in the cache to backtrack correctly.

Example Walkthrough

Let’s use an example to understand this process more clearly.

Consider a binary tree like this:

markdown
        10
       /  \
      5   -3
     / \    \
    3   2    11
   / \   \
  3  -2   1

Suppose target = 8.

Starting at the Root (10):

currPathSum = 10
oldPathSum = 10 - 8 = 2
cache does not contain 2, so we don’t increment self.result.
Update cache with {10: 1} (1 occurrence of cumulative sum 10).
Move to Left Child (5):

currPathSum = 10 + 5 = 15
oldPathSum = 15 - 8 = 7
cache does not contain 7, so self.result remains unchanged.
Update cache with {10: 1, 15: 1}.
Move to Left Child (3):

currPathSum = 15 + 3 = 18
oldPathSum = 18 - 8 = 10
cache contains 10, which means there’s a path from the root (sum 10) to this node that has the target sum.
Increment self.result by 1.
Update cache with {10: 1, 15: 1, 18: 1}.
Move to Left Child (3) again:

currPathSum = 18 + 3 = 21
oldPathSum = 21 - 8 = 13
cache does not contain 13, so self.result remains unchanged.
Update cache with {10: 1, 15: 1, 18: 1, 21: 1}.
Backtrack (return to the previous node, and update cache):

After finishing the subtree of a node, decrement currPathSum in cache for that node to avoid counting paths from sibling nodes incorrectly.


Why Adding and Subtracting Works?

The subtraction (currPathSum - target) allows us to see if a previous prefix sum (path sum up to some ancestor node) has
made it so that a path ending at the current node would sum to the target.

By keeping track of cumulative sums and their occurrences in cache, the code can check for each node if there 
exists a previous sum that would result in a target path ending at the current node. The addition and removal
from cache are essential for accurately counting all paths without double-counting overlapping paths.

This technique makes the algorithm efficient by avoiding recalculating the sum of each possible path from scratch. 
Instead, it leverages cumulative sums and a hashmap to track occurrences, achieving an 

O(N) time complexity.

