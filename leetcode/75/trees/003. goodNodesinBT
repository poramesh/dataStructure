Given a binary tree root, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.

Example 1:

Input: root = [3,1,4,3,null,1,5]
Output: 4

         3
       /   \
      1     4
     /     / \
    3     1   5

Explanation: Nodes in blue are good.
Root Node (3) is always a good node.
Node 4 -> (3,4) is the maximum value in the path starting from the root.
Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.


Example 2:
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because "3" is higher than it.
         3
       /  
      3   
     / \
    4   2


Example 3:

Input: root = [1]
Output: 1


Explanation: Root is considered as good.
 

Constraints:

The number of nodes in the binary tree is in the range [1, 10^5].
Each node's value is between [-10^4, 10^4].


Examlpe 4:
[3, 1, 4, 3, 1, 1, 2, 5, null, 1, 5, null, null, null, null, null, 4],
                     3
                   /   \
                 1       4
               /   \    /   \
             3     1   1     2
            / \      \   \
           5   null   1   5
            \
             4

o/p: 5








solution:



int goodNodes(struct TreeNode* root){
    if (!root) return 0;
    
    int count = 0;
    void dfs(struct TreeNode* node, int curMax){
        if (!node) return;
        
        if (node->val >= curMax){
            count ++;
            curMax = node->val;
        }
        dfs(node->left, curMax);
        dfs(node->right, curMax);
    }
    
    dfs(root, root->val);
    return count;
}



The function counts the "good nodes" in a binary tree. A "good node" is defined as a node whose value is greater than or equal to
the maximum value encountered along the path from the root to that node.

Passing by Value: In the line dfs(node->left, curMax);, curMax is passed by value. This means that each recursive call of dfs receives a copy of curMax.
The variable curMax represents the maximum value seen so far along the path to the current node.

Example Tree

         3
       /   \
      1     4
     / \
    3   2

Initial Call:

dfs(root, 3) is called, with curMax initialized to 3.

At Node 3:

curMax is 3. Since 3 >= 3, it is a good node. count is incremented to 1.
curMax is updated to 3 (stays the same).
Recursive calls are made:
dfs(node->left, 3) for the left child (1).
dfs(node->right, 3) for the right child (4).

At Node 1:

Recursive calls:
dfs(node->left, 3) for the left child (3).
dfs(node->right, 3) for the right child (2).

At Node 3 (left child of 1):

curMax is still 3. Since 3 >= 3, it is a good node. count increments to 2.
curMax is updated to 3.
Recursive calls:
dfs(node->left, 3) (no left child).
dfs(node->right, 3) (no right child).

At Node 2 (right child of 1):

curMax is 3. Since 2 < 3, it is not a good node. count remains 2.
Recursive calls (no children).

Back to Node 3 (right child of root):

Now at 4, with curMax still 3. Since 4 >= 3, it is a good node. count increments to 3.
curMax is updated to 4.
Recursive calls (no children).

Final Count
After traversing the entire tree, the function will return 3, meaning there are three good nodes: 3 (root), 
3 (left child of 1), and 4 (right child of the root).




if you are trying to solve it from pass by reference, this is what it would be like:


int goodNodes(struct TreeNode* root){
    if (!root) return 0;
    
    int count = 0;
    int curmax = root->val; 
    
    void dfs(struct TreeNode* node, int *curMax){
        if (!node) return;
        if (node->val >= *curMax){
            count ++;
            *curMax = node->val;
        }

         int leftMax = *curMax;   // Save the current max for the left subtree
         int rightMax = *curMax;  // Save the current max for the right subtree
         
        dfs(node->left, &leftMax);
        dfs(node->right, &rightMax);
        printf("l: %d ",leftMax);
        printf("r: %d ",rightMax);
        printf("\n");
    }

    
    dfs(root, &curmax);
    return count;
}

//
l: 5 r: 5 
l: 5 r: 5 
l: 5 r: 3 
l: 3 r: 3 
l: 5 r: 5 
l: 3 r: 5 
l: 3 r: 3 
l: 4 r: 4 
l: 4 r: 4 
l: 4 r: 4 
l: 3 r: 4 

                   3
                 /   \
                1     4
               / \   / \
              3   1 1   2
             / \      \
            5   null   5
           /
          4


(or)


Tree Structure Breakdown
Root: 3: (3 >= 3) is true (1), so return 2 + 2 + 1 = 5.
Left Subtree:
.Node 1 (left child of 3): (1 >= 3) is false (0), so return 2+ 0 + 0 = 2.
   .Node 3 (left child of 1): (3 >= 3) is true (1), so return 1 + 0 + 1 = return 2.
       .Node 5 (left child of 3): (5 >= 5) is true (1), so return 0 + 0 + 1 = return 1.
            .Node 4 (left child of 5): (4 >= 5) is false (0), so return 0 + 0 + 0 = 0.
   .Node 1 (right child of 1): (1 >= 3) is false (0), so return 2 + 0 + 0 = 2.
Right Subtree:
.Node 4 (right child of 3):(4 >= 4) is true (1), so return 1 + 0 + 1 = 2.
   .Node 1 (left child of 4): 0+1+0: return 1
       .Node 5 (right child of 5): 0+0+1 return 1
   .Node 2 (right child of 4): (2 >= 4) is false (0), so return 0 + 0 + 0 = return 0.



    def goodNodes(self, r, ma=-10000):
        return self.goodNodes(r.left, max(ma, r.val)) + self.goodNodes(r.right, max(ma, r.val)) + (r.val >= ma) if r else 0


(or)

class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution: 
    def goodNodes(self, r: TreeNode, ma=float('-inf')) -> int:
        if r is None:
            return 0
        
        # Count this node if its value is greater than or equal to the maximum value seen so far
        good = 1 if r.val >= ma else 0
        
        # Update the maximum value for the next recursive calls
        ma = max(ma, r.val)
        
        # Recur for left and right children
        good += self.goodNodes(r.left, ma) // it gets add on like good = good + goodNodes()
        good += self.goodNodes(r.right, ma)
        
        return good


        3
       / \
      1   4
     / \
    3   1

Start at the root node (3):

ma = -10000 (initial value): Call goodNodes(3), update ma to max(-10000, 3) = 3.

Move to the left child (1): Call goodNodes(1, 3), update ma to max(3, 1) = 3.

Move to the left child (3): Call goodNodes(3, 3), update ma to max(3, 3) = 3.

Both left and right children of this node are None, so both calls return 0.
(3 >= 3) is true (1), so return 0 + 0 + 1 = 1.

Go back to node (1) and move to the right child (1): Call goodNodes(1, 3), update ma to max(3, 1) = 3.
Both left and right children are None, so both calls return 0.
(1 >= 3) is false (0), so return 0 + 0 + 0 = 0.

Now, back at node (1), we combine results: left = 1 (from node 3), right = 0 (from node 1).
(1 >= 3) is false (0), so return 1 + 0 + 0 = 1.

Back at the root node (3):

Now, move to the right child (4): Call goodNodes(4, 3), update ma to max(3, 4) = 4.

Both left and right children are None, so both calls return 0.
(4 >= 4) is true (1), so return 0 + 0 + 1 = 1.

Finally, combine results at the root:

left = 1 (from node 1), right = 1 (from node 4).
(3 >= 3) is true (1), so return 1 + 1 + 1 = 3.

(or)




class Solution: 
    def goodNodes(self, root: TreeNode) -> int:
          self.ans = 0
          maxV = root.val
          self.check(maxV, root)
          return self.ans
    
    
    def check(self, maxV, current):
        if current == None: return
        if current.val >= maxV:
            self.ans += 1
            maxV = current.val
        
        self.check(maxV, current.left)
        self.check(maxV, current.right)
