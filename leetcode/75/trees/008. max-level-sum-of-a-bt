Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

 

Example 1:


Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
Example 2:

Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2
 



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:
        #q = deque[root]
        q = deque([root])

        j=0
        result = {}


        while q:
            level = len(q)
            j=j+1
            for i in range(level):
                val = q.popleft()
                if j not in result:
                    result[j] = []
                result[j].append(val.val)
                if val.left: q.append(val.left)
                if val.right: q.append(val.right)
        

        cur_max =-inf 
        leve=0
        for i in range(1, len(result)+1):
            print(result[i])
            if sum(result[i]) > cur_max:
                cur_max = sum(result[i])
                print(cur_max)
                leve = i
        return leve
        



WHEN I WRITE CODE THIS IS WHAT I COME UP WITH AHAHHAHAAHAHHAHA














(or)


BFS

    def maxLevelSum(self, root: TreeNode) -> int:
        max, level, maxLevel = -float('inf'), 0, 0
        q = collections.deque()
        q.append(root)
        while q:
            level += 1
            sum = 0
            for _ in range(len(q)):
                node = q.popleft()
                sum += node.val
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            if max < sum:
                max, maxLevel = sum, level        
        return maxLevel


(or)


DFS:


    def maxLevelSum(self, root: TreeNode) -> int:
        def dfs(node: TreeNode, list: List, level: int) -> None:
            if not node:
                return
            if len(list) == level:
                list.append(node.val)
            else:
                list[level] += node.val
            dfs(node.left, list, level + 1)
            dfs(node.right, list, level + 1)
        list = []    
        dfs(root, list, 0)
        return 1 + list.index(max(list))



        1
       / \
      7   0
     / \
    7  -8



This tree looks like:
Level 0: 1
Level 1: 7, 0
Level 2: 7, -8

DFS Execution Breakdown
We'll track the list variable during the DFS traversal. This list accumulates the sum of each level:

Start at root (1) — level = 0
len(list) == 0, so append 1 → list = [1]

Go to left child (7) — level = 1

len(list) == 1, so append 7 → list = [1, 7]

Go to left child (7) — level = 2
len(list) == 2, so append 7 → list = [1, 7, 7]

Backtrack and go to right child (-8) — level = 2
len(list) == 3, so add -8 → list = [1, 7, -1]

Backtrack to root, go to right child (0) — level = 1
len(list) == 3, so add 0 → list = [1, 7, -1] (no change)

Final Level Sum List
After the traversal, the level sums are:
Level 0: 1
Level 1: 7
Level 2: -1

So the maximum sum is 7, which occurs at level 1 (0-indexed). But the function returns 1 + index, so the result is:

python
return 1 + list.index(7)  # 1 + 1 = 2


