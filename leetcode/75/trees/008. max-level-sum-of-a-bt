Given the root of a binary tree, the level of its root is 1, the level of its children is 2, and so on.

Return the smallest level x such that the sum of all the values of nodes at level x is maximal.

 

Example 1:


Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we return the level with the maximum sum which is level 2.
Example 2:

Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2
 



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def maxLevelSum(self, root: Optional[TreeNode]) -> int:
        #q = deque[root]
        q = deque([root])

        j=0
        result = {}


        while q:
            level = len(q)
            j=j+1
            for i in range(level):
                val = q.popleft()
                if j not in result:
                    result[j] = []
                result[j].append(val.val)
                if val.left: q.append(val.left)
                if val.right: q.append(val.right)
        

        cur_max =-inf 
        leve=0
        for i in range(1, len(result)+1):
            print(result[i])
            if sum(result[i]) > cur_max:
                cur_max = sum(result[i])
                print(cur_max)
                leve = i
        return leve
        



WHEN I WRITE CODE THIS IS WHAT I COME UP WITH AHAHHAHAAHAHHAHA














(or)


    def maxLevelSum(self, root: TreeNode) -> int:
        max, level, maxLevel = -float('inf'), 0, 0
        q = collections.deque()
        q.append(root)
        while q:
            level += 1
            sum = 0
            for _ in range(len(q)):
                node = q.popleft()
                sum += node.val
                if node.left:
                    q.append(node.left)
                if node.right:
                    q.append(node.right)
            if max < sum:
                max, maxLevel = sum, level        
        return maxLevel


