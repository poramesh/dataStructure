Longest zigzag in the binary tree

You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.

       1
      / \
     2   3
      \   \
       4   5
      /     \
     6       7

longest zigzsg is 1->2->4->6 which is 3


class Solution:
        def longestZigZag(self, root):
            def dfs(root):
                if not root: return [-1, -1, -1]
                left, right = dfs(root.left), dfs(root.right)
                return [left[1] + 1, right[0] + 1, max(left[1] + 1, right[0] + 1, left[2], right[2])]
            
            return dfs(root)[-1


solve it from the last left node, you will make sense out of it.


Node | left move| right move | best
6    | 0        | 0          | 0
4    | 1        | 0          | 1
2    | 0        | 2          | 2
7    | 0        | 0          | 0
5    | 0        | 1          | 1
3    | 0        | 1          | 1
1    | 3        | 1          | 3



left[0] = longest ZigZag starting by going left at the left child.
left[1] = longest ZigZag starting by going right at the left child.
right[0] = longest ZigZag starting by going left at the right child.
right[1] = longest ZigZag starting by going right at the right child.


Now, at the current node,
you want to move left or you want to move right.

Case 1: Moving left from current node
After you move left, you are standing at the left child.
At left child, next move must be right (because zigzag must alternate).
So you care about left[1] (not left[0]).
That’s why you pick left[1].

Case 2: Moving right from current node
After you move right, you are standing at the right child.
At right child, next move must be left.
So you care about right[0] (not right[1]).
That’s why you pick right[0].


Maybe a tiny example helps:
Suppose you are at Node 2:

    2
     \
      4
     /
    6
At node 2:
If you go right to 4,
Then at 4, you must go left (because of zigzag).
So we care about right[0] from Node 2.


One-line Memory Trick:
When you move in one direction, you need the opposite move at the child.
So use the opposite index:
move left → left[1]
move right → right[0]




Step-by-step for leaf nodes:



       1
      / \
     2   3
      \   \
       4   5
      /     \
     6       7

At 6:
dfs(None) → [-1, -1, -1] for both left and right
So:
left move = left[1] + 1 = (-1) + 1 = 0
right move = right[0] + 1 = (-1) + 1 = 0
best = max(0, 0, -1, -1) = 0
Return: [0, 0, 0]
Means:
6 can go left for 0
6 can go right for 0
Best so far = 0

At 4 (parent of 6):
left = dfs(6) = [0, 0, 0]
right = dfs(None) = [-1, -1, -1]
So:
left move = left[1] + 1 = 0 + 1 = 1
right move = right[0] + 1 = (-1) + 1 = 0
best = max(1, 0, 0, -1) = 1
Return: [1, 0, 1]
Means:
4 can go left for 1 (4 → 6)
4 can go right for 0
Best so far = 1


At 2 (parent of 4):
  2
   \ 
    4
   /
  6
left = dfs(None) = [-1, -1, -1]
right = dfs(4) = [1, 0, 1]
So:
left move = left[1] + 1 = (-1) + 1 = 0
right move = right[0] + 1 = 1 + 1 = 2
best = max(0, 2, -1, 1) = 2
Return: [0, 2, 2]
Means:
2 can go left for 0
2 can go right for 2 (2 → 4 → 6)
Best so far = 2

Similarly for right side:
At 7:
Return: [0, 0, 0]
At 5:
left = dfs(None) = [-1, -1, -1]
right = dfs(7) = [0, 0, 0]
So:
left move = left[1] + 1 = 0
right move = right[0] + 1 = 1
best = 1
Return: [0, 1, 1]

At 3:
left = dfs(None)
right = dfs(5) = [0, 1, 1]
So:
left move = 0
right move = 1
best = 1
Return: [0, 1, 1]
Finally at root 1:
left = dfs(2) = [0, 2, 2]
right = dfs(3) = [0, 1, 1]

So:

       1
      / \
     2   3
      \   \
       4   5
      /     \
     6       7

left move = left[1] + 1 = 2 + 1 = 3
right move = right[0] + 1 = 0 + 1 = 1
best = max(3, 1, 2, 1) = 3
Return: [3, 1, 3]

FINAL ANSWER: 3
Which is the correct longest ZigZag length!


