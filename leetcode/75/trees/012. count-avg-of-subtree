Given the root of a binary tree, return the number of nodes where the value of the node is equal to the average of the values in its subtree.

Note:
The average of n elements is the sum of the n elements divided by n and rounded down to the nearest integer.
A subtree of root is a tree consisting of root and all of its descendants.
 

Example 1:

Input: root = [4,8,5,0,1,null,6]
Output: 5
Explanation: 
For the node with value 4: The average of its subtree is (4 + 8 + 5 + 0 + 1 + 6) / 6 = 24 / 6 = 4.
For the node with value 5: The average of its subtree is (5 + 6) / 2 = 11 / 2 = 5.
For the node with value 0: The average of its subtree is 0 / 1 = 0.
For the node with value 1: The average of its subtree is 1 / 1 = 1.
For the node with value 6: The average of its subtree is 6 / 1 = 6.


Example 2:
Input: root = [1]
Output: 1
Explanation: For the node with value 1: The average of its subtree is 1 / 1 = 1.
 

Constraints:
The number of nodes in the tree is in the range [1, 1000].
0 <= Node.val <= 1000





SOL:


I SOLVED IT FIRST LIEK THIS. EVEN THOUGH IT PASSED ALL THE TEST CASES, THE TIME COMPLEXITY IS A LOT LIKE 483ms



# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right


        4
       / \
      8   5
     / \   \
    0   1   6



class Solution:
    def averageOfSubtree(self, root: TreeNode) -> int:
        self.result=0

        def avg(root,av):
            if root is None: 
                return av
            av+=root.val
            av = avg(root.left,av)
            av = avg(root.right,av)
            return av

        def count(root,c):
            if root is None:
                return c
            c+=1
            c=count(root.left,c) 
            c=count(root.right,c)
            return c

        def post_order_traversal(root):
            if root is None:
                return 
            post_order_traversal(root.left)
            post_order_traversal(root.right)
            av=avg(root,0)
            c = count(root,0)
            avera=av//c
            if avera == root.val:
                print("av=",1)
                self.result+=1
        
        post_order_traversal(root)
        return self.result





it could be further reduced to but the runtime is 389ms it doesnt reduce anything drastically:

class Solution:
    def averageOfSubtree(self, root: TreeNode) -> int:
        self.result = 0

        def avg(root, av, c):
            if root is None:
                return av, c
            av += root.val
            c += 1
            av, c = avg(root.left, av, c)
            av, c = avg(root.right, av, c)
            return av, c

        def post_order_traversal(root):
            if root is None:
                return
            post_order_traversal(root.left)
            post_order_traversal(root.right)
            av, c = avg(root, 0, 0)  # FIXED: call with 3 arguments
            avera = av // c
            if avera == root.val:
                self.result += 1

        post_order_traversal(root)
        return self.result





NOW WE HAVE A EFFICIENT SOLUTION. 


        4
       / \
      8   5
     / \   \
    0   1   6




class Solution:
    def averageOfSubtree(self, root: TreeNode) -> int:
        self.result = 0

        def dfs(node):
            if not node:
                return (0, 0)  # (sum, count)
            
            left_sum, left_count = dfs(node.left)
            right_sum, right_count = dfs(node.right)

            total_sum = left_sum + right_sum + node.val
            total_count = left_count + right_count + 1

            if node.val == total_sum // total_count:
                self.result += 1

            return (total_sum, total_count)

        dfs(root)
        return self.result

        
