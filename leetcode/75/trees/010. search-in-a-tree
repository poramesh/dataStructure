


You are given the root of a binary search tree (BST) and an integer val.

Find the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.

 

Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]


        4
       / \
      2   7
     / \
    1   3



class Solution:
    def searchBST(self, root, val):
        if root and val < root.val: return self.searchBST(root.left, val)
        elif root and val > root.val: return self.searchBST(root.right, val)
        return root




(or)


class Solution:
    def searchBST(self, root, val):
        return self.searchBST(root.left,val) if root and val<root.val else self.searchBST(root.right,val) if root and val>root.val else root



[50,30,70,20,40,60,80,10,25,35,45]

O/P: [30,20,40,10,25,35,45]



            50
          /    \
        30      70
       /  \    /  \
     20   40  60   80
    /  \  /  \
  10  25 35  45
