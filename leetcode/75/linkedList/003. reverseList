Given the head of a singly linked list, reverse the list, and return the reversed list.

Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]




/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */
struct ListNode* reverseList(struct ListNode* head) {

    struct ListNode* prev, *cur, *link_next; // we gotta mention * with each vairable or else only prev will be pointer variable.c
    prev = NULL;
    cur = head;
    link_next;
    while(cur!=NULL){
        link_next = cur->next;
        cur->next = prev;
        prev = cur;
        cur = link_next;
    }
    head = prev;

    return head;
    
}


python:


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseList(self, head: Optional[ListNode]) -> Optional[ListNode]:

        next_list = None
        prev = None
        cur = head
        while(cur is not None):
            next_list = cur.next
            cur.next = prev
            prev = cur
            cur = next_list
        
        head = prev

        return head
        
