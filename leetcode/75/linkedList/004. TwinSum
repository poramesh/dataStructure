In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.




Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 


Input: head = [4,2,2,3]
Output: 7
Explanation:
The nodes with twins present in this linked list are:
- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.
- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.
Thus, the maximum twin sum of the linked list is max(7, 4) = 7. 


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* ptr = NULL;


int compute(struct ListNode* head, int maxSum){

    if(head == NULL){
        return maxSum;
    }
    maxSum = compute(head->next,maxSum);

    int value = head->val + ptr->val;

    if(value > maxSum){
        maxSum = value;
    }

    ptr = ptr->next;
    return maxSum;
}

int pairSum(struct ListNode* head) {

    ptr = head;
    int maxSum = 0;
    maxSum = compute(head,maxSum);
    return maxSum;

}



(or)

def pairSum(self, head: Optional[ListNode]) -> int:
	slow, fast = head, head
	maxVal = 0

	# Get middle of linked list
	while fast and fast.next:
		fast = fast.next.next
		slow = slow.next

	# Reverse second part of linked list
	curr, prev = slow, None

	while curr:       
		curr.next, prev, curr = prev, curr, curr.next   

	# Get max sum of pairs
	while prev:
		maxVal = max(maxVal, head.val + prev.val)
		prev = prev.next
		head = head.next

	return maxVal


(or)


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* ptr = NULL;


int compute(struct ListNode* head, int maxSum){

    if(head == NULL){
        return maxSum;
    }
    maxSum = compute(head->next,maxSum);

    int value = head->val + ptr->val;

    if(value > maxSum){
        maxSum = value;
    }

    ptr = ptr->next;
    return maxSum;
}

int pairSum(struct ListNode* head) {

    ptr = head;
    int maxSum = 0;
    maxSum = compute(head,maxSum);
    return maxSum;

}


(or)

class Solution { 
        ListNode ptr = null;
        int maxSum = 0;
       public int pairSum(ListNode head)
             {
              ptr = head; maxSum = 0; 
              compute(head); 
               return maxSum; 
             }

private void compute(ListNode head) {
    if (head == null) {
        return;
    }
    compute(head.next);
    maxSum = Math.max(maxSum, head.val + ptr.val);
    ptr = ptr.next;
}
}
