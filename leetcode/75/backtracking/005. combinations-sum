Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where
the chosen numbers sum to target. You may return the combinations in any order.

The same number may be chosen from candidates an unlimited number of times. Two combinations are unique 
if the frequency of at least one of the chosen numbers is different.

The test cases are generated such that the number of unique combinations that sum up to target is less than 150 combinations for the given input.

 

Example 1:

Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]

Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.
7 is a candidate, and 7 = 7.
These are the only two combinations.

Example 2:

Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []
 

Constraints:
1 <= candidates.length <= 30
2 <= candidates[i] <= 40
All elements of candidates are distinct.
1 <= target <= 40





sol:


class Solution(object):
    def combinationSum(self, candidates, target):
        res = []
        candidates.sort()
        self.dfs(candidates, target, [], res)
        return res
    
    def dfs(self, candidates, target, path, res):
        if target < 0:
            return   #backtracking
        if target == 0:
            res.append(path)
            return
        for i in range(len(candidates)):
            self.dfs(candidates[i:], target - candidates[i], path + [candidates[i]], res)  






                                []
                                |
                -------------------------------------
                |            |           |         |
               [2]          [3]         [6]       [7]
                |            |           |         |
        ----------------     |           |       Target == 0
        |       |      |     |           |          => [7]
      [2,2]  [2,3]   [2,6]  [3,3]      [6,6]
        |      |             |          |
     [2,2,2] [2,3,3]       [3,3,3]    [6,6,6]
        |
   [2,2,3] → Target == 0 => add [2,2,3]




Let’s Trace an Example
Input: candidates = [2, 3, 6, 7], target = 7

First call:
dfs([2, 3, 6, 7], 7, [], res)





Depth-First Exploration:

i = 0 → choose 2
path = [2], target = 7 - 2 = 5
recursive call: dfs([2, 3, 6, 7], 5, [2], res)
    i = 0 → choose 2 again
    path = [2, 2], target = 3
        choose 2 again → [2,2,2], target = 1
            choose 2 again → [2,2,2,2], target = -1 → invalid (backtrack)

        try 3 → [2,2,2,3], target = -2 → invalid

        try 6, 7 → overshoot → invalid, meaning 1-7=-6, meets the same result as 3. 

      backtrack

      try 3 → [2,2,3], target = 0 → valid! Add to result
      try 6, 7 → overshoot

    backtrack

    try 3 → [2,3], target = 2
        choose 3 → [2,3,3], target = -1 → invalid
        choose 6, 7 → invalid

    backtrack

    try 6 → [2,6] → target = -1 → invalid

    try 7 → [2,7] → -2 → invalid


i = 1 → choose 3
path = [3], target = 4
   choose 3 again → [3,3], target = 1
      choose 3 → [3,3,3] → -2 → invalid
   try 6, 7 → invalid


i = 2 → choose 6 → [6], target = 1 → no valid continuation

i = 3 → choose 7 → [7], target = 0 → valid! Add to result


[[2, 2, 3], [7]]

