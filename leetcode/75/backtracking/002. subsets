Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.



sol:


class Solution(object):
    def subsets(self, nums):
        res = []
        self.dfs(nums, [], res)
        return res
    
    def dfs(self, nums, path, res):
        res.append(path)
        for i in range(len(nums)):
            self.dfs(nums[i+1:], path + [nums[i]], res)     





nums: [1,2,3]
Output
[[],[1],[1,2],[1,2,3],[1,3],[2],[2,3],[3]]
Expected
[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


nums =[0]
Output
[[],[0]]
Expected
[[],[0]]



index and path
0 [1]
0 [1, 2]
0 [1, 2, 3]
1 [1, 3]
1 [2]
0 [2, 3]
2 [3]


dfs([1,2,3], []) → res = [[]]

└── i = 0 → dfs([2,3], [1]) → res = [[], [1]]
    ├── i = 0 → dfs([3], [1,2]) → res = [..., [1,2]]
    │   └── i = 0 → dfs([], [1,2,3]) → res = [..., [1,2,3]]
    └── i = 1 → dfs([], [1,3]) → res = [..., [1,3]]

└── i = 1 → dfs([3], [2]) → res = [..., [2]]
    └── i = 0 → dfs([], [2,3]) → res = [..., [2,3]]

└── i = 2 → dfs([], [3]) → res = [..., [3]]

