Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1



solution:


i iniatilly solved wiht an additonal array and it got me an idea on how to solve this.


class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        j=0
        l = len(nums)
        for i in range(l):
            if(nums[i]==0):
                continue
            else: 
                nums[j]=nums[i]
                j+=1  
        while j < l:
            nums[j] = 0 
            j+=1


another method:


ppoiinter method:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]


class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        anchor = 0
        for explorer in range(len(nums)):
            if nums[explorer] != 0:
                nums[anchor], nums[explorer] = nums[explorer], nums[anchor]
                anchor += 1





another pointer method using while loop:

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        i=0
        j=0
        while i < len(nums):
            while i<len(nums) and nums[i]==0: i+=1
            while i<len(nums) and nums[i]!=0:
                nums[j],nums[i]=nums[i],nums[j]
                j+=1
                i+=1


            




        
 
