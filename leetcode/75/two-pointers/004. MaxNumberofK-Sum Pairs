
You are given an integer array nums and an integer k.
In one operation, you can pick two numbers from the array whose sum equals k and remove them from the array.

Return the maximum number of operations you can perform on the array.

 Hint: Sort array, then use two pointer approach. Check if sum is greater, smaller or equal then shift pointers accordingly.

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.

Example 2:

Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


class Solution:
    def maxOperations(self, nums: List[int], k: int) -> int:
        nums.sort()
        l = 0
        r = len(nums)-1
        ans = 0
        while l<r:
            if nums[r]+nums[l]==k:
                ans+=1
                l+=1
                r-=1
            elif nums[r]+nums[l]>k:
                r-=1
            else:
                l+=1         
            print("res:",res,"  i:", i,"  j:",j)

        return ans


after sorted: [1, 2, 2, 3, 4, 4, 5, 5]
              [0, 1, 2, 3, 4, 5, 6, 7]
k=6
res: 1   i: 1   j: 6 //its 1 and 6 since, match is found
res: 1   i: 1   j: 5
res: 2   i: 2   j: 4
res: 3   i: 3   j: 3

res = 3

its simple, we know that, 2+5>6 so if we want to find the match then we gotta decerement upperbound. its sorted so we might find the match in the lowerbond

(or)

class Solution:
    def maxOperations(self, nums, k):
        cnt, ans = Counter(nums), 0
        print(cnt) #Counter({1: 1, 2: 1, 3: 1, 4: 1})
        for val in cnt:
            print(cnt[val],cnt[k-val])
            ans += min(cnt[val], cnt[k - val]) 
            #we are doind min here, cause we want to intialise cnt[k-val] as value, as 0 when there exists no such k-val.
            print(ans)
            print()


        return ans//2



[1,5,5,2,3,4,2,4]
k=6

after counter: Counter({5: 2, 2: 2, 4: 2, 1: 1, 3: 1})

for 5 in count:
   ans+=min(count[6-5]=count[1]=1, count[5]=2) ans = 1
for 2 in count:
   ans+=min(count[6-2]=count[4]=2, count[2]=2) ans = 3
for 4 in count:
   ans+=min(count[6-4]=count[2]=2,count[4]=2) ans = 5
for 1 in count:
  ans+=min(count[6-1]=count[5]=2,count[1]=1) ans = 6
for 1 in count:
  ans+=min(count[6-3]=count[3]=1, count[1]=1) ans = 7



Why does it add 1 when there's only one 3?

Well, the code does count the pair (3, 3) once — it doesn't ensure that val != k - val. But that’s not necessarily wrong.

However, for the final result, it does:
return ans // 2

This division by 2 is important. It ensures that for each unique pair (val, k - val), we count it only once, even though the loop visits both val and k - val.

Let’s look at all pairs that sum to 6:
(2, 4): cnt[2] = 2, cnt[4] = 2 → 2 pairs
(1, 5): cnt[1] = 1, cnt[5] = 2 → 1 pair
(3, 3): cnt[3] = 1 → not enough to form a pair, needs 2 threes

So actual valid pairs:
(2, 4) × 2
(1, 5) × 1

Total = 3 valid pairs



The question which is asked: how many pairs can be constructed, such that sum in each pair is equal to k. Imagine, that k = 8 and we have numbers
2, 2, 2, 6, 6, 6, 6, 6, 6. Then we can construct 3 pairs in this case. In general if we have c1 times of number x and c2 times of number k - x, we
can construct min(c1, c2) pairs with numbers x, k - x. So, all we need to do is to use Counter(nums) to calculate frequency of each number and
then iterate over each number val, try to find number equal to k - val and update ans by min(freq, cnt[k - val]). Note also, that when we do this,
we count each pair exaclty 2 times, so we need to divide answer by 2 in the end.

Question: what happens, if k = 8, and we working wigh case 4, 4, 4, 4, 4, 4, 4? Then there can be constructed 7//2 = 3 pairs, but when 
we count we count it 7 times. However in the end we will divide it by 2 and everything will work fine: because there can be only one
number like this: k//2 (if k is odd or if there is no such pairs, everythin will be OK as well)

(or)

return (lambda c: sum(min(c[n], c[k-n]) for n in c))(Counter(nums))//2

c: sum (min)


So Counter(nums) is passed as the argument c to the lambda function, and it returns the computed sum.



example: Lambda for Immediate Execution:

(lambda x: x + 1)(5)  # Output: 6
The lambda function is immediately called with 5 as an argument.


/ = floating point division 5/2 = 2.5
// = integer  5/2 = 2
