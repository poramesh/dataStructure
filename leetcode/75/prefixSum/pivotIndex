Given an array of integers nums, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the
numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is 0 because there are no elements to the left.
This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.

Example 1:

Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.
Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Example 2:

Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.

Example 3:

Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0
 

Constraints:

1 <= nums.length <= 104
-1000 <= nums[i] <= 1000



solution:


class Solution:
    def pivotIndex(self, nums: List[int]) -> int:

        for i in range(len(nums)):
            if(sum(nums[i+1:len(nums)+1]) == sum(nums[0:i])):
                return i   
        return -1


Example:

nums = [1, 7, 3, 6, 5, 6]
Let’s walk through it:

i = 0:
Left: sum(nums[0:0]) = 0
Right: sum(nums[1:7]) = 7 + 3 + 6 + 5 + 6 = 27
Not equal

i = 1:
Left: sum(nums[0:1]) = 1
Right: sum(nums[2:7]) = 3 + 6 + 5 + 6 = 20
Not equal

i = 2:
Left: sum(nums[0:2]) = 1 + 7 = 8
Right: sum(nums[3:7]) = 6 + 5 + 6 = 17
Not equal

i = 3:
Left: sum(nums[0:3]) = 1 + 7 + 3 = 11
Right: sum(nums[4:7]) = 5 + 6 = 11
Match! → return 3


It's just inefficient (O(n²)) because sum() in Python is O(n) and you're calling it twice in every iteration.




(or)



what does enumerate do?

The enumerate() function in Python is used when you want to loop over a sequence (like a list, tuple, or string) and also keep track of the index of the current item.

Example 1: Basic usage

fruits = ['apple', 'banana', 'cherry']

for i, fruit in enumerate(fruits):
    print(i, fruit)

Output:
0 apple
1 banana
2 cherry

Example 2: Using start=1

for i, fruit in enumerate(fruits, start=1):
    print(i, fruit)

Output:
1 apple
2 banana
3 cherry

Why use enumerate() instead of manual indexing?

Instead of this:
for i in range(len(fruits)):
    print(i, fruits[i])

You can write:

for i, fruit in enumerate(fruits):
    print(i, fruit)




class Solution(object):
    def pivotIndex(self, nums):
        # Initialize leftSum & rightSum to store the sum of all the numbers strictly to the index's left & right respectively...
        leftSum, rightSum = 0, sum(nums)
        # Traverse elements through the loop...
        for idx, ele in enumerate(nums):
            rightSum -= ele
            # If the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right...
            if leftSum == rightSum:
                return idx      # Return the pivot index...
            leftSum += ele
        return -1       # If there is no index that satisfies the conditions in the problem statement...





nums = [1, 7, 3, 6, 5, 6]
Initial:
leftSum = 0
rightSum = sum(nums) = 28

Iteration:
1. idx = 0, ele = 1
rightSum = 28 - 1 = 27
leftSum = 0
Not equal → leftSum += 1 → leftSum = 1

2. idx = 1, ele = 7
rightSum = 27 - 7 = 20
leftSum = 1
Not equal → leftSum += 7 → leftSum = 8

3. idx = 2, ele = 3
rightSum = 20 - 3 = 17
leftSum = 8
Not equal → leftSum += 3 → leftSum = 11

4. idx = 3, ele = 6
rightSum = 17 - 6 = 11
leftSum = 11
Match! Return 3


Time & Space Complexity:
Time: O(n) — one pass through the list
Space: O(1) — constant extra space
