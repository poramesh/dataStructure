Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.
You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]
 

Constraints:

2 <= nums.length <= 105
-30 <= nums[i] <= 30
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.


solution:

1. creating two for loops

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        product = []

        for i in range(length):
            pro = 1
            for j in range(length): 
                if i == j:
                     continue
                pro = nums[j]*pro
            
            product.append(pro)
return product 

2. Dividing the product of array with the number

but this wouldnt work cause divide my zero would result in an error.

[-1,1,0,-3,3]
:(( 

class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        pro = 1
        ans = []
        
        for i in nums:
            pro = pro *i
        
        for i in range(length):
            a = pro/nums[i]
            ans.append(a)
        
        return ans



3. using prefix and suffix


I REALLY WONDER HOW ANYONE OCMES W THIS :(

""""""""""
Prefix: A group of letters added at the beginning of a word to change its meaning.
Example:
"unhappy" → "un-" is the prefix, added to "happy"
"preview" → "pre-" is the prefix, added to "view"

Suffix: A group of letters added at the end of a word.
Example:
"happiness" → "-ness" is the suffix, added to "happy"
"running" → "-ing" is the suffix, added to "run"




In programming or strings:

A prefix is a substring that occurs at the start of a string.
Example:
text = "hello"
prefix = text[:3]  # "hel"

A suffix is a substring that occurs at the end of a string.
Example:
text = "hello"
suffix = text[-2:]  # "lo"

""""""""""


Instead of computing product excluding nums[i] for each i by looping (which would be O(n²)), you precompute prefix and suffix products.
Prefix product (pre[i]) = product of all elements before index i.
Suffix product (suf[i]) = product of all elements after index i.

Then:
ans[i] = pre[i] * suf[i]


Step-by-Step Breakdown of Your Code
length = len(nums)
pre = []
suf = [1]*length
pre.append(1)
ans = []
pre will store prefix products. Start with 1 since nothing is before the first element.
suf is initialized with all 1s. Will store suffix products.
ans will be the final result.



First loop: Build the prefix array
for i in range(1, length):
    pro = nums[i-1] * pre[i-1]
    pre.append(pro)

Let’s trace for nums = [1, 2, 3, 4]:
i=1 → pre[1] = nums[0] * pre[0] = 1 * 1 = 1
i=2 → pre[2] = nums[1] * pre[1] = 2 * 1 = 2
i=3 → pre[3] = nums[2] * pre[2] = 3 * 2 = 6

Now pre = [1, 1, 2, 6]
Meaning:
pre[0] = 1 (nothing before 0th)
pre[1] = product of [0] → 1
pre[2] = product of [0,1] → 1×2=2
pre[3] = product of [0,1,2] → 1×2×3=6

SO HERE WE ARE DOING prev[i-1]*nums[i-1] since, nums[i-1] is exlcuded in the previous multiplication. eg: 2,3,4 so here pre[2-1=1]=2 and nums[2-1=1]=3 so multipltying will give 6




Second loop: Build the suffix array in reverse

for i in range(0, length-1)[::-1]:
    pro = nums[i+1] * suf[i+1]
    suf[i] = pro
This loop is reverse — going from right to left. nums = [1, 2, 3, 4]:
i = 2 → suf[2] = nums[3] * suf[3] = 4 * 1 = 4
i = 1 → suf[1] = nums[2] * suf[2] = 3 * 4 = 12
i = 0 → suf[0] = nums[1] * suf[1] = 2 * 12 = 24

Now suf = [24, 12, 4, 1]
Meaning:
suf[0] = product of [1,2,3] = 2×3×4 = 24
suf[1] = product of [2,3] = 3×4 = 12
suf[2] = product of [3] = 4
suf[3] = product of [] = 1




class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        pre = []
        suf = [1]*length
        pre.append(1)
        ans = []
        for i in range(1,length):
            pro = nums[i-1]*pre[i-1]
            pre.append(pro)

        for i in range(0, length-1)[::-1]:
            pro = nums[i+1]*suf[i+1]
            suf[i] = pro

        for i in range(length):
            ans.append(suf[i]*pre[i])
            
        return ans




4. Directly store the product of prefix and suffix into the final answer array

we would not need seprate array.

i/p: [1,2,3,4]

Here we are storin the cur=1 and multiplying it with ans, initially both cur and ans is 1 so initial index will be 1, and calculate cur for the next

first loop
[1, 1, 1, 1]
1
[1, 1, 1, 1]
2
[1, 1, 2, 1]
6
[1, 1, 2, 6]
24

second loop where it gets started with curr = 1
[1, 1, 2, 6]
4
[1, 1, 8, 6]
12
[1, 12, 8, 6]
24
[24, 12, 8, 6]
24

end result =>
[24, 12, 8, 6]


class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        length = len(nums)
        ans = [1]*length
        curr = 1
        for i in range(length):
            ans[i] = ans[i]*curr
            curr = nums[i]*curr
            print(ans)

        curr = 1 
        for i in range(0, length)[::-1]:
            ans[i] = ans[i]*curr
            curr = nums[i]*curr
            print(ans)            
        return ans


----------------------------------------------------------------
n=5
for i in range(n-1, -1, -1):
   print(i)


4,3,2,1,0
            
            
