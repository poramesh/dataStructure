Example 1:

Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r

Example 2:

Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s

Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d
 

Constraints:

1 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letters.

python:

class Solution:
   def mergeAlternately(self, word1: str, word2: str) -> str:
        str = [ ]
        i = 0
        j = 0
        len_word1 = len(word1)
        len_word2 = len(word2)
         
        while(i < len_word1 and j < len_word2):
            str += word1[i]
            str += word2[j]
            i = i+1
            j = j+1
        
        if i < len_word1:
            str += word1[i:]

        if j < len_word2:
            str += word2[j:]
        
        return ''.join(str)




(or)


def merge_alternately(word1, word2):
    merged = []
    i = 0
    while i < len(word1) or i < len(word2):
        if i < len(word1):
            merged.append(word1[i])
        if i < len(word2):
            merged.append(word2[i])
        i += 1
    return ''.join(merged)

# Test Example 2
word1 = "ab"
word2 = "pqrs"
print(merge_alternately(word1, word2))  # Output: "apbqrs"




JS:

/**
 * @param {string} word1
 * @param {string} word2
 * @return {string}
 */
var mergeAlternately = function(word1, word2) {
 let result = '';
  for (let i = 0; i < Math.max(word1.length, word2.length); i++) {
    if (i < word1.length) result += word1[i];
    if (i < word2.length) result += word2[i];
  }
  return result;
};

C++:

class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string result = "";
        int i = 0;
        while (i < word1.length() || i < word2.length()) {
            if (i < word1.length()) {
                result += word1[i];
            }
            if (i < word2.length()) {
                result += word2[i];
            }
            i++;
        }
        return result;
    }
};
