Given a string s, reverse only all the vowels in the string and return it.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in both lower and upper cases, more than once.


Example 1:

Input: s = "hello"
Output: "holle"

Example 2:

Input: s = "leetcode"
Output: "leotcede"
 
Constraints:

1 <= s.length <= 3 * 10^5
s consist of printable ASCII characters.

solution:


class Solution:
    def reverseVowels(self, s: str) -> str:

        s = list(s)
        vow = ['a','e','i','o','u','A','E','I','O','U']
        str1 = []
        for i in range(len(s)):
            if( s[i] in vow):
                str1.append(s[i])
                
        for i in range(len(s)):
            if(s[i] in vow):
                s[i] = str1.pop()
   
        return ''.join(s)

______________________________________________________________
this is a beauutiful logic.

*************

waht string.find() does is that it finds the args in the strings, and sends the index else -1. 
eg: s.find(e) //returns 1
s.find(a) // returns -1

Create Tuple: Python evaluates word[end], word[start] to (word[3], word[1]), which is ('d', 'b').
Unpack and Assign: It assigns 'd' to word[start] and 'b' to word[end], effectively swapping the values. 

**********


def reverse_vowels(w):
    w = list(w)  # Convert string to list so we can modify characters
    s = 0
    e = len(w) - 1
    vowels = "aeiouAEIOU"

    while s < e:
        while s < e and w[s] not in vowels:
            s += 1
        while s < e and w[e] not in vowels:
            e -= 1
        w[s], w[e] = w[e], w[s]
        s += 1
        e -= 1

    return "".join(w)




Input:  "hello"
Output: "holle"


w = ['h', 'e', 'l', 'l', 'o']

s = 0, e = 4

Loop starts: 0<4
w[0] = 'h' → not a vowel → s = 1
and now w[1]='e' ->is a vowel
proceed to end while loop
w[4] = 'o' → vowel so e is still is 4

and now we swap w[1] and w[4]

After swap:
w = ['h', 'o', 'l', 'l', 'e']

and we increment, cause we dont want to stuck in the buggy loop forever
s = 2
e = 3

Next: 2<3
w[2] = 'l' → not a vowel → s = 3

Now 3>3, so loop ends.
Final result: 'holle'

we dont have to worry about swapping, cause its swppping with itself.


class Solution(object):
    def reverseVowels(self, s):
        word = list(s)    # Convert the input string to a character array.
        start = 0
        end = len(s) - 1
        vowels = "aeiouAEIOU"
        
        # Loop until the start pointer is no longer less than the end pointer.
        while start < end:
            # Move the start pointer towards the end until it points to a vowel.
            while start < end and vowels.find(word[start]) == -1:
                start += 1
            
            # Move the end pointer towards the start until it points to a vowel.
            while start < end and vowels.find(word[end]) == -1:
                end -= 1
            
            # Swap the vowels found at the start and end positions.
            word[start], word[end] = word[end], word[start]
            
            # Move the pointers towards each other for the next iteration.
            start += 1
            end -= 1
        
        # Convert the character array back to a string and return the result.
        return "".join(word)



javascript:


const isVowel = (c) => {
    return ['a','e','i','o','u'].includes(c.toLowerCase())
}

const replaceVowels = (arr, start, end) => {
    const temp = arr[end]
    arr[end] = arr[start]
    arr[start] = temp
}

/**
 * @param {string} s
 * @return {string}
 */
var reverseVowels = function(s) {
    if (s.length === 0) {
        return s
    }

    const arr = s.split('')
    let start = 0
    let end = s.length - 1

    while (start < end) {
        while (!isVowel(arr[start]) && start < end) {
            start++
        }

        while (!isVowel(arr[end]) && start < end) {
            end--
        }

        if (start < end) {
            replaceVowels(arr, start, end)
        }

        start++
        end--
    }

    return arr.join('')
};
