Given an integer array nums, return true if there exists a triple of indices (i, j, k) such that i < j < k and nums[i] < nums[j] < nums[k]. 
If no such indices exists, return false.


Example 1:

Input: nums = [1,2,3,4,5]
Output: true
Explanation: Any triplet where i < j < k is valid.

Example 2:

Input: nums = [5,4,3,2,1]
Output: false
Explanation: No triplet exists.

Example 3:

Input: nums = [2,1,5,0,4,6]
Output: true
Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.



the indices i, j, and k do not have to be consecutive.
The only requirements are:
i < j < k (they appear in increasing order by position),
nums[i] < nums[j] < nums[k] (they form a strictly increasing sequence by value).
 

Constraints:

1 <= nums.length <= 5 * 10^5
-231 <= nums[i] <= 2^31 - 1



SOLutiON:

HOWWW DO THEY COME UP WITH SUCH SOLUTIONNNNNSNSNSNNS::::

wahts happening here ;
initially we are setting first and second variable with infinity
and whenever the number comes in with less than value we assign it to first and then if its lesser thna first then second is assigned.

if number is lesser than second is found then we return trueeeee

class Solution:
  def increasingTriplet(self,nums):
    first = second = float('inf')
    for n in nums:
        if n <= first:
            first = n
        elif n <= second:
            second = n
        else:
            return True
    return False


nums = [2, 1, 5, 0, 4, 6]


| Step | n | first | second | What happens?                                                    |
| ---- | - | ----- | ------ | ---------------------------------------------------------------- |
| 1    | 2 | 2     | inf    | `n <= first`, so `first = 2`                                     |
| 2    | 1 | 1     | inf    | `n <= first`, so `first = 1`                                     |
| 3    | 5 | 1     | 5      | `n > first`, so update `second = 5`                              |
| 4    | 0 | 0     | 5      | `n <= first`, so `first = 0`                                     |
| 5    | 4 | 0     | 4      | `n > first`, so update `second = 4`                              |
| 6    | 6 | 0     | 4      | `n > second`, so we found triplet: **0 < 4 < 6** â†’ `return True` |

        
