You have a RecentCounter class which counts the number of recent requests within a certain time frame.

Implement the RecentCounter class:

RecentCounter() Initializes the counter with zero recent requests.

int ping(int t) Adds a new request at time t, where t represents some time in milliseconds, and returns the number of requests that
has happened in the past 3000 milliseconds (including the new request). Specifically, return the number of requests that have happened 
in the inclusive range [t - 3000, t].

It is guaranteed that every call to ping uses a strictly larger value of t than the previous call.

 constraints:

1 <= t <= 109
Each test case will call ping with strictly increasing values of t.
At most 104 calls will be made to ping.

Example 1:

Input
["RecentCounter", "ping", "ping", "ping", "ping"]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]

Explanation

RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3



SOLUTION:


class RecentCounter(object):

    def __init__(self):
        self.counter = []  # Stores all ping times
        self.start = 0     # Points to the index of the earliest valid ping in the last 3000 ms

    def ping(self, t):
        self.counter.append(t)  # Add the current ping
        # Move 'start' forward while the ping is older than t - 3000
        while self.counter[self.start] < t - 3000:
            self.start += 1
        # The number of pings in the last 3000 ms is the count from 'start' to end
        return len(self.counter) - self.start




o/P;

["RecentCounter","ping","ping","ping","ping"]
[[],[1],[1000],[3301],[4000]]

the empty array is to initialise RecentCounter lol and its not empty array lol
Stdout
[1]
0
[1, 1000]
0
[1, 1000, 3301]
1
[1, 1000, 3301, 4000]
1



Trace Example
Let's trace through a sequence of calls:

obj = RecentCounter()
print(obj.ping(1))       # Output: ?
print(obj.ping(100))     # Output: ?
print(obj.ping(3001))    # Output: ?
print(obj.ping(3002))    # Output: ?

1. ping(1)
counter = [1]
start = 0
No elements are older than 1 - 3000 = -2999
So, we keep all pings
Return: len(counter) - start = 1 - 0 = 1

2. ping(100)
counter = [1, 100]
start = 0
No elements are older than 100 - 3000 = -2900
Return: 2 - 0 = 2

3. ping(3001)
counter = [1, 100, 3001]
start = 0
Now we remove pings less than 3001 - 3000 = 1
counter[0] = 1 is not less than 1 → no need to remove
Return: 3 - 0 = 3

4. ping(3002)
counter = [1, 100, 3001, 3002]
We remove pings less than 3002 - 3000 = 2
counter[0] = 1 → 1 < 2 → remove (increment start)
start = 1
Return: 4 - 1 = 3

Final State
counter = [1, 100, 3001, 3002]
start = 1 (points to 100)
