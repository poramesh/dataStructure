Input: costs = [17,12,10,2,7,2,11,20,8], k = 3, candidates = 4
Output: 11
Explanation: We hire 3 workers in total. The total cost is initially 0.
- In the first hiring round we choose the worker from [17,12,10,2,7,2,11,20,8]. The lowest cost is 2, and we break the tie by the smallest index, 
which is 3. The total cost = 0 + 2 = 2.
- In the second hiring round we choose the worker from [17,12,10,7,2,11,20,8]. The lowest cost is 2 (index 4). The total cost = 2 + 2 = 4.
- In the third hiring round we choose the worker from [17,12,10,7,11,20,8]. The lowest cost is 7 (index 3). The total cost = 4 + 7 = 11. Notice that 
the worker with index 3 was common in the first and last four workers.
The total hiring cost is 11.



so here we basically have to find the k workers upto the 4th index from start and end:

class Solution:
    def totalCost(self, costs: List[int], k: int, candidates: int) -> int:
        res=0
        while k:
            n=len(costs)
            i = min(costs[:candidates]) #[17,12,10]
            j = min(costs[-candidates:]) #[11,20,8]
            r = min(i,j)
            res+=r
            costs.remove(r)             
            k-= 1
        
        return res


[17,12,10,2,7,2,11,20,8]
k = 3
candidates = 4
Output = 11

I came up with this solution first and it passed few test cases and not many 

and it didnt work



You’re picking the minimum from the first candidates and last candidates workers using:
i = min(costs[:candidates])
j = min(costs[-candidates:])

Then you're removing the chosen cost from the costs list using:
costs.remove(r)
This approach works fine until the list becomes short and the same worker appears in both slices — this is where the problem arises.


the issue is:

You rely on costs[:candidates] and costs[-candidates:] assuming they never overlap.
But when list shrinks, they do overlap.
Then remove(r) might remove the wrong duplicate.
And you break the tie-breaking rule: "choose lowest index".




lets simulate with this 
costs = [50, 80, 34, 9, 86, 20, 67, 94, 65, 82, 40, 79, 74, 92, 84, 37, 19, 16, 85, 20, 79, 25, 89, 55, 67, 84, 3, 79, 38, 16, 44, 2, 54, 58]
k = 7
candidates = 12

Round 1
costs[:12] = [50, 80, 34, 9, 86, 20, 67, 94, 65, 82, 40, 79]
costs[-12:] = [25, 89, 55, 67, 84, 3, 79, 38, 16, 44, 2, 54]

→ i = min(front) = 9
→ j = min(back) = 2
→ r = min(9, 2) = 2

Then costs.remove(2) removes the last element (good)

All fine so far.

Round 2
costs is now 33 items.
costs[:12] = [50, 80, 34, 9, 86, 20, 67, 94, 65, 82, 40, 79]
costs[-12:] = [25, 89, 55, 67, 84, 3, 79, 38, 16, 44, 54, 58]

→ i = 9
→ j = 3
→ r = 3
costs.remove(3) removes index 26 — okay.

Still working.

Round 3
Now costs is 32 items.
costs[:12] = [50, 80, 34, 9, 86, 20, 67, 94, 65, 82, 40, 79]
costs[-12:] = [25, 89, 55, 67, 84, 79, 38, 16, 44, 54, 58]

→ i = 9, j = 16 → pick 9
costs.remove(9) removes index 3

Still fine.

Round 4 
and now if we ding the item which is in the back and when you do remove, it removes something that is middle which is not part of the backward list
hence the code will not work.





class Solution:
    def totalCost(self, costs, k, candidates):
        i = 0
        j = len(costs) - 1
        pq1 = []
        pq2 = []

        ans = 0
        while k > 0:
            while len(pq1) < candidates and i <= j:
                heapq.heappush(pq1, costs[i])
                i += 1
            while len(pq2) < candidates and i <= j:
                heapq.heappush(pq2, costs[j])
                j -= 1

            t1 = pq1[0] if pq1 else float('inf')
            t2 = pq2[0] if pq2 else float('inf')

            if t1 <= t2:
                ans += t1
                heapq.heappop(pq1)
            else:
                ans += t2
                heapq.heappop(pq2)

            k -= 1
        return ans

i<j ensures tht theres no overlapping:

costs = [50,80,34,9,86,20,67,94,65,82,40,79,74,92,84,37,19,16,85,20,79,25,89,55,67,84,3,79,38,16,44,2,54,58]
k = 30
candidates = 12


Stdout
pq1 []
pq2 []
pq1 [9, 34, 20, 65, 40, 50, 67, 94, 80, 86, 82, 79]
pq2 [2, 3, 38, 16, 44, 54, 79, 58, 84, 67, 55, 89]
pq1 [9, 34, 20, 65, 40, 50, 67, 94, 80, 86, 82, 79]
pq2 [3, 16, 38, 58, 44, 54, 79, 89, 84, 67, 55]
pq1 [9, 34, 20, 65, 40, 50, 67, 94, 80, 86, 82, 79]
pq2 [3, 16, 25, 58, 44, 38, 79, 89, 84, 67, 55, 54]
pq1 [9, 34, 20, 65, 40, 50, 67, 94, 80, 86, 82, 79]
pq2 [16, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55]
pq1 [9, 34, 20, 65, 40, 50, 67, 94, 80, 86, 82, 79]
pq2 [16, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [20, 34, 50, 65, 40, 79, 67, 94, 80, 86, 82]
pq2 [16, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [20, 34, 50, 65, 40, 74, 67, 94, 80, 86, 82, 79]
pq2 [16, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [20, 34, 50, 65, 40, 74, 67, 94, 80, 86, 82, 79]
pq2 [25, 44, 38, 58, 54, 79, 79, 89, 84, 67, 55]
pq1 [20, 34, 50, 65, 40, 74, 67, 94, 80, 86, 82, 79]
pq2 [20, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82]
pq2 [20, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [20, 44, 25, 58, 54, 38, 79, 89, 84, 67, 55, 79]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [25, 44, 38, 58, 54, 79, 79, 89, 84, 67, 55]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [25, 44, 38, 58, 54, 79, 79, 89, 84, 67, 55, 85]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [38, 44, 79, 58, 54, 79, 85, 89, 84, 67, 55]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [16, 44, 38, 58, 54, 79, 85, 89, 84, 67, 55, 79]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [38, 44, 79, 58, 54, 79, 85, 89, 84, 67, 55]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [19, 44, 38, 58, 54, 79, 85, 89, 84, 67, 55, 79]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [38, 44, 79, 58, 54, 79, 85, 89, 84, 67, 55]
pq1 [34, 40, 50, 65, 79, 74, 67, 94, 80, 86, 82, 92]
pq2 [37, 44, 38, 58, 54, 79, 85, 89, 84, 67, 55, 79]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82]
pq2 [37, 44, 38, 58, 54, 79, 85, 89, 84, 67, 55, 79]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82, 84]
pq2 [37, 44, 38, 58, 54, 79, 85, 89, 84, 67, 55, 79]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82, 84]
pq2 [38, 44, 79, 58, 54, 79, 85, 89, 84, 67, 55]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82, 84]
pq2 [38, 44, 79, 58, 54, 79, 85, 89, 84, 67, 55]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82, 84]
pq2 [44, 54, 79, 58, 55, 79, 85, 89, 84, 67]
pq1 [40, 65, 50, 80, 79, 74, 67, 94, 92, 86, 82, 84]
pq2 [44, 54, 79, 58, 55, 79, 85, 89, 84, 67]
pq1 [50, 65, 67, 80, 79, 74, 84, 94, 92, 86, 82]
pq2 [44, 54, 79, 58, 55, 79, 85, 89, 84, 67]
pq1 [50, 65, 67, 80, 79, 74, 84, 94, 92, 86, 82]
pq2 [44, 54, 79, 58, 55, 79, 85, 89, 84, 67]
pq1 [50, 65, 67, 80, 79, 74, 84, 94, 92, 86, 82]
pq2 [54, 55, 79, 58, 67, 79, 85, 89, 84]
pq1 [50, 65, 67, 80, 79, 74, 84, 94, 92, 86, 82]
pq2 [54, 55, 79, 58, 67, 79, 85, 89, 84]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [54, 55, 79, 58, 67, 79, 85, 89, 84]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [54, 55, 79, 58, 67, 79, 85, 89, 84]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [55, 58, 79, 84, 67, 79, 85, 89]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [55, 58, 79, 84, 67, 79, 85, 89]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [58, 67, 79, 84, 89, 79, 85]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [58, 67, 79, 84, 89, 79, 85]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [65, 79, 67, 80, 82, 74, 84, 94, 92, 86]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [67, 79, 74, 80, 82, 86, 84, 94, 92]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [67, 79, 74, 80, 82, 86, 84, 94, 92]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [74, 79, 84, 80, 82, 86, 92, 94]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [74, 79, 84, 80, 82, 86, 92, 94]
pq2 [67, 84, 79, 85, 89, 79]
pq1 [74, 79, 84, 80, 82, 86, 92, 94]
pq2 [79, 84, 79, 85, 89]
pq1 [74, 79, 84, 80, 82, 86, 92, 94]
pq2 [79, 84, 79, 85, 89]
pq1 [79, 80, 84, 94, 82, 86, 92]
pq2 [79, 84, 79, 85, 89]
pq1 [79, 80, 84, 94, 82, 86, 92]
pq2 [79, 84, 79, 85, 89]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [79, 84, 79, 85, 89]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [79, 84, 79, 85, 89]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [79, 84, 89, 85]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [79, 84, 89, 85]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [84, 85, 89]
pq1 [80, 82, 84, 94, 92, 86]
pq2 [84, 85, 89]
pq1 [82, 86, 84, 94, 92]
pq2 [84, 85, 89]
pq1 [82, 86, 84, 94, 92]
pq2 [84, 85, 89]
pq1 [84, 86, 92, 94]
pq2 [84, 85, 89]
pq1 [84, 86, 92, 94]
pq2 [84, 85, 89]
pq1 [86, 94, 92]
pq2 [84, 85, 89]
pq1 [86, 94, 92]
pq2 [84, 85, 89]
pq1 [86, 94, 92]
pq2 [85, 89]
pq1 [86, 94, 92]
pq2 [85, 89]


Output
1465
Expected
1465





