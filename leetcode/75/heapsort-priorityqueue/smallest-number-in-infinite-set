You have a set which contains all positive integers [1, 2, 3, 4, 5, ...].

Implement the SmallestInfiniteSet class:

SmallestInfiniteSet() Initializes the SmallestInfiniteSet object to contain all positive integers.
int popSmallest() Removes and returns the smallest integer contained in the infinite set.
void addBack(int num) Adds a positive integer num back into the infinite set, if it is not already in the infinite set.


Example 1:

Input
["SmallestInfiniteSet", "addBack", "popSmallest", "popSmallest", "popSmallest", "addBack", "popSmallest", "popSmallest", "popSmallest"]
[[], [2], [], [], [], [1], [], [], []]
Output
[null, null, 1, 2, 3, null, 1, 4, 5]

Explanation
SmallestInfiniteSet smallestInfiniteSet = new SmallestInfiniteSet();
smallestInfiniteSet.addBack(2);    // 2 is already in the set, so no change is made.
smallestInfiniteSet.popSmallest(); // return 1, since 1 is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 2, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 3, and remove it from the set.
smallestInfiniteSet.addBack(1);    // 1 is added back to the set.
smallestInfiniteSet.popSmallest(); // return 1, since 1 was added back to the set and
                                   // is the smallest number, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 4, and remove it from the set.
smallestInfiniteSet.popSmallest(); // return 5, and remove it from the set.



MIGHT NOT BE THE BEST BEST SOLUTION BUT I DID IT, EVEN THOUGH THE SPACE AND TIME COMPLEXITY IS F UP AHHHHAHAHAHHAHA

class SmallestInfiniteSet:

    def __init__(self):
        self.set=set([i for i in range(1,1001)])
       
        
    def popSmallest(self) -> int:
        if self.set: #this conidtion cause min doesnt work if it is empty and it will throw error. 
            mini = min(self.set)
            self.set.remove(mini)
            return mini

        
    def addBack(self, num: int) -> None:
        self.set.add(num)
        
       

(or)

APPROACH:
maintain a variable which points to the current smallest element untill addBack is called
when addBack() is called only add elements to the set which were popped earlier i.e. smaller than cur
when popSmallest() is called return the top most element in the set if it exists else return cur

class SmallestInfiniteSet:

    def __init__(self):
        self.cur = 1
        self.set = set()
        

    def popSmallest(self) -> int:
        if self.set:
            rem = min(self.set)
            self.set.remove(rem)
            return rem
        else:
            self.cur+=1
            return self.cur-1

    def addBack(self, num: int) -> None:
        if self.cur> num: 
            self.set.add(num)
        


# Your SmallestInfiniteSet object will be instantiated and called as such:
# obj = SmallestInfiniteSet()
# param_1 = obj.popSmallest()
# obj.addBack(num)



(or)

class SmallestInfiniteSet:

    def __init__(self):
        self.heap=[]
        self.min_num=1
        
    def popSmallest(self) -> int:
        if self.heap:
            return heapq.heappop(self.heap)
        self.min_num+=1
        return self.min_num-1
        
    def addBack(self, num: int) -> None:
        if self.min_num>num and num not in self.heap:
            heapq.heappush(self.heap,num)
