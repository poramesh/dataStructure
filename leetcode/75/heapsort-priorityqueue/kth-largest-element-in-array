 Kth Largest Element in an Array


Given an integer array nums and an integer k, return the kth largest element in the array.
Note that it is the kth largest element in the sorted order, not the kth distinct element.

Can you solve it without sorting?

 

Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4



using sorting:
we can use list method sort() to sort a list, if it is not a list, we have to conver it to one.


num = 4312
digits = list(str(num))  # ['4', '3', '1', '2']
digits.sort()  # Sorts in place: ['1', '2', '3', '4']
sorted_num = int(''.join(digits))
print(sorted_num)  # Output: 1234

since it sorts in a place, when you do sorted_val = digits.sort() //sorted_val will not have sorted values isntead it will sorts in plave and return None

and we can use sorted(nums), which returns new sorted values.
  
num = 4312
sorted_num = int(''.join(sorted(str(num))))
print(sorted_num)  # Output: 1234

Sort the digits in descending order
num = 4312
sorted_desc = int(''.join(sorted(str(num), reverse=True)))
print(sorted_desc)  # Output: 4321

#using sorted method 
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        nums.sort()
        return nums[len(nums)-k] //nums[-k] //sorted(nums,reverse=true)[-k]



# O(nk) time, bubble sort idea, TLE
def findKthLargest2(self, nums, k):
    for i in range(k):
        for j in range(len(nums)-i-1):
            if nums[j] > nums[j+1]:
                # exchange elements, time consuming
                nums[j], nums[j+1] = nums[j+1], nums[j]
    return nums[len(nums)-k]



# O(nk) time, selection sort idea


nums= [3,2,1,5,6,4]
k=2
we will sort only until 2th place
class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        for i in range(len(nums), len(nums)-k, -1):
            tmp = 0
            for j in range(i):
                if nums[j] > nums[tmp]:
                    tmp = j
            nums[tmp], nums[i-1] = nums[i-1], nums[tmp]
        print(nums) //[3, 2, 1, 4, 5, 6]
        return nums[len(nums)-k]


# O(k+(n-k)lgk) time, min-heap


import heapq

def findKthLargest4(self, nums, k):
    heap = []
    for num in nums:
        heapq.heappush(heap, num)
    for _ in range(len(nums)-k):
        heapq.heappop(heap)
    return heapq.heappop(heap)

nums = [3, 2, 1, 5, 6, 4]
k=2
heap = [1, 3, 2, 5, 6, 4]

in the for loop to find the largest element, we will remove the element from the top

6-2 = 4
[1, 3, 2, 5, 6, 4]
[2, 3, 4, 5, 6]
[3, 5, 4, 6]
[4, 5, 6]
[5,6]
and the loop exists.
we do the last pop and return the value.



it starts off with 3
  3
2

2 is less than 3
  2
3

now 1 is less

  1
3   2


    1
 3    2
5 6  4
  
     
     1
   3   2
  5  6  4



(or)


MaxHeap

Covert the nums array into maxHeap.
Remove k-1 elements from the max heap.
Then the kth element is the kth largest elemment.


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        maxHeap = nums
        for i in range(len(maxHeap)):
            maxHeap[i] = -maxHeap[i]
        heapify(maxHeap)
        for i in range(k-1):
            heappop(maxHeap)
        return -maxHeap[0]

Complexity:
Time: O(N + KlogN), heapify cost O(N), heappop k times costs O(KlogN).
Space: O(1)


maxHeap after nums have been introduced to it [3, 2, 1, 5, 6, 4]
maxHeap after negating values to get maxHeap [-3, -2, -1, -5, -6, -4]
maxHeap after Heapifying [-6, -5, -4, -3, -2, -1]
maxHeap after removing elements until K [-5, -3, -4, -1, -2]



(or)

return heapq.nlargest(k,nums)[-1]





(or)

THIS IS SUCH A SIMPLE AND BEAUTIFUL LOGIC

from heapq import heappush


class Solution:
    def findKthLargest(self, nums: List[int], k: int) -> int:
        minHeap = []
        for x in nums:
            heappush(minHeap, x)
            print(minHeap)
            if len(minHeap) > k:
                heappop(minHeap)
                print(minHeap)
        return minHeap[0]


nums = [3, 2, 1, 5, 6, 4]
k=2
[3]
[2, 3]
[1, 3, 2]
inside the if loop [2, 3]
[2, 3, 5]
inside the if loop [3, 5]
[3, 5, 6]
inside the if loop [5, 6]
[4, 6, 5]
inside the if loop [5, 6]


Complexity:
Time: O(NlogK)
Space: O(K)
