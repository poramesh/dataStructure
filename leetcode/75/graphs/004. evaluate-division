You are given an array of variable pairs equations and an array of real numbers values, where equations[i] = [Ai, Bi] and values[i] represent
the equation Ai / Bi = values[i]. Each Ai or Bi is a string that represents a single variable.

You are also given some queries, where queries[j] = [Cj, Dj] represents the jth query where you must find the answer for Cj / Dj = ?.

Return the answers to all queries. If a single answer cannot be determined, return -1.0.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.

Note: The variables that do not occur in the list of equations are undefined, so the answer cannot be determined for them.

 

Example 1:
Input: equations = [["a","b"],["b","c"]], values = [2.0,3.0], queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ? 
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]
note: x is undefined => -1.0

Example 2:
Input: equations = [["a","b"],["b","c"],["bc","cd"]], values = [1.5,2.5,5.0], queries = [["a","c"],["c","b"],["bc","cd"],["cd","bc"]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [["a","b"]], values = [0.5], queries = [["a","b"],["b","a"],["a","c"],["x","y"]]
Output: [0.50000,2.00000,-1.00000,-1.00000]



sol:

a / b = 2.0
This means:
The value of a is 2 times the value of b.

Or:
a = 2.0 × b
We want to build a graph where:
Nodes are variables
Edges represent how to go from one variable to another using multiplication


real world ex:
Currency Conversion
Let’s say:
a = US Dollars (USD)
b = Euros (EUR)

So:
If you have 1 USD, you can get 2 EUR ⇒ USD → EUR = 2.0
If you have 1 EUR, you can get 0.5 USD ⇒ EUR → USD = 0.5


a / b = 2.0
can be intrepreted as:
A directed edge from a to b with a weight of 2.0
And another directed edge from b to a with a weight of 1 / 2.0 = 0.5
You're essentially encoding relationships:
a → b with weight 2.0 (meaning: a = 2.0 * b)
b → a with weight 0.5 (meaning: b = 0.5 * a)
So, the graph representation will look like this:

equations = [["a","b"],["b","c"]]
values = [2.0, 3.0]
queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]

Graph Representation:
Nodes: a, b, c

Edges:
a → b with weight 2.0
b → a with weight 1/2.0 = 0.5
b → c with weight 3.0
c → b with weight 1/3.0 ≈ 0.3333



for (a, b), val in zip(equations, values):
equations is expected to be a list of pairs (usually tuples), like this:
equations = [["a", "b"], ["b", "c"]]
values = [2.0, 3.0]

So each element in equations is a pair (e.g., ["a", "b"]), and you're doing tuple unpacking directly inside the loop:

Breakdown:
zip(equations, values) gives you pairs like (["a", "b"], 2.0)
(a, b), val unpacks that:
["a", "b"] → a = "a", b = "b"
val = 2.0


graph construction:

from collections import defaultdict

def build_graph(equations, values):
    graph = defaultdict(dict)
    for (a, b), val in zip(equations, values):
        graph[a][b] = val
        graph[b][a] = 1.0 / val
    return graph

graph:{
a: {b: 2.0},
b: {a: 0.5, c: 3.0},
c: {b: 1/3 = 0.333}
}


Solving Queries with DFS (or BFS)

Each query like a / c means:
Is there a path from node a to node c?
If yes, multiply the weights along the path.

def dfs(graph, curr, target, visited, acc_product):
    if curr not in graph or target not in graph:
        return -1.0
    if curr == target:
        return acc_product
    visited.add(curr)

    for neighbor, value in graph[curr].items():
        if neighbor not in visited:
            result = dfs(graph, neighbor, target, visited, acc_product * value)
            if result != -1.0:
                return result
    return -1.0
 
def calcEquation(equations, values, queries):
    graph = build_graph(equations, values)
    results = []
    for a, b in queries:
        results.append(dfs(graph, a, b, set(), 1.0))
    return results


equations = [["a","b"],["b","c"]]
values = [2.0, 3.0]
queries = [["a","c"],["b","a"],["a","e"],["a","a"],["x","x"]]


Process Each Query Using DFS Traversal
We'll search for a path from the numerator to the denominator, multiplying weights along the way.

Query 1: ["a", "c"]
We want to find a / c.
Path: a → b → c
From a → b: multiply by 2.0
From b → c: multiply by 3.0
So: a / c = 2.0 * 3.0 = 6.0
Answer: 6.0

Query 2: ["b", "a"]
We want to find b / a
Direct edge: b → a = 0.5
Answer: 0.5

Query 3: ["a", "e"]
We want to find a / e
But node 'e' is not in the graph at all
So, there's no way to evaluate the expression
Answer: -1.0

Query 4: ["a", "a"]
We want to find a / a
The same variable on both sides
Even without any graph, we know the answer is always 1.0
Answer: 1.0

Query 5: ["x", "x"]
We want to find x / x
Node 'x' doesn't exist in the graph
Answer: -1.0

Final Output:
[6.0, 0.5, -1.0, 1.0, -1.0]
