There are n rooms labeled from 0 to n - 1 and all the rooms are locked except for room 0. Your goal is to visit all the rooms. However,
you cannot enter a locked room without having its key.

When you visit a room, you may find a set of distinct keys in it. Each key has a number on it, denoting which room it unlocks, and you 
can take all of them with you to unlock the other rooms.

Given an array rooms where rooms[i] is the set of keys that you can obtain if you visited room i, return true if you can
visit all the rooms, or false otherwise.

 

Example 1:
Input: rooms = [[1],[2],[3],[]]
Output: true
Explanation: 
We visit room 0 and pick up key 1.
We then visit room 1 and pick up key 2.
We then visit room 2 and pick up key 3.
We then visit room 3.
Since we were able to visit every room, we return true.

Example 2:
Input: rooms = [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can not enter room number 2 since the only key that unlocks it is in that room.



sol:

nei is neighbour

class Solution(object):
    def canVisitAllRooms(self, rooms):
        seen = [False] * len(rooms)
        seen[0] = True
        stack = [0]
        #At the beginning, we have a todo list "stack" of keys to use.
        #'seen' represents at some point we have entered this room.
        while stack:  #While we have keys...
            node = stack.pop() # get the next key 'node'
            for nei in rooms[node]: # For every key in room # 'node'...
                if not seen[nei]: # ... that hasn't been used yet
                    seen[nei] = True # mark that we've entered the room
                    stack.append(nei) # add the key to the todo list
        return all(seen) # Return true iff we've visited every room



initialisation:
seen = [False, False, False, False]   # Track which rooms we've visited
seen[0] = True                        # Start in room 0
stack = [0]                           # We'll explore from room 0



While Loop Trace

Iteration 1:
>stack = [0]
>node = stack.pop() → node = 0
>rooms[0] = [1]
>Loop through keys:
nei = 1 (unvisited)
seen[1] = True
stack = [1]

Iteration 2:
>stack = [1]
>node = 1
>rooms[1] = [2]
>Loop:
nei = 2 → mark seen, add to stack
seen = [True, True, True, False]
stack = [2]

Iteration 3:
>stack = [2]
node = 2
rooms[2] = [3]
nei = 3 → mark seen, add to stack
seen = [True, True, True, True]
stack = [3]

Iteration 4:
stack = [3]
node = 3
rooms[3] = [] → no keys → nothing added

Stack is empty.

return all(seen)  # all([True, True, True, True]) → True



Input: rooms = [[1,3],[3,0,1],[2],[0]]


when you start off you add stack = [0]
after you enter while you wont exit until there exists soemthing in the stack
you pop 0 
and now you visit all the keys in that node.
room[0] = [1,3]
1 is not true , it is unvisited so we visit it and gets it keys
stack = [1]
now 3 is also not visited so we mark it as visited and get it keys
stack = [1,3]

and now we pop 3
rooms[3] = [0]
0 is already true, no need to go
stack[1]
and now we pop 1
rooms[1] = 3,0,1
3 and 0 and 1 is all true so we wont visit.

now we return all(seen) it is false since we didnt find 2nd key
