
You are given an m x n grid where each cell can have one of three values:

0 representing an empty cell,
1 representing a fresh orange, or
2 representing a rotten orange.
Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.
Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return -1.

 

Example 1:

Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

        2 1 1
        1 1 0
        0 1 1

        00 01 02
        10 11 12
        20 21 22
1:
        2  2  1
        2  1  0
        0  1  1
2:
        2  2  2
        2  2  0
        0  1  1
3:
        2  2  2
        2  2  0
        0  2  1
4:
        2  2  2
        2  2  0
        0  2  2

          

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.

Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.



initially rotting: {(0, 0)}
fresh {(0, 1), (2, 1), (1, 1), (0, 2), (2, 2), (1, 0)}

rotting after applying adjacent rots {(0, 1), (1, 0)}
fresh after minus'ing {(2, 1), (1, 1), (0, 2), (2, 2)}
rotting after applying adjacent rots {(1, 1), (0, 2)}
fresh after minus'ing {(2, 1), (2, 2)}
rotting after applying adjacent rots {(2, 1)}
fresh after minus'ing {(2, 2)}
rotting after applying adjacent rots {(2, 2)}
fresh after minus'ing set()


rotting changes since rotting is added only if it exists in the fresh

initially rotting: {(0, 0)}
fresh {(0, 1), (2, 1), (1, 1), (0, 2), (2, 2), (1, 0)}
0 1
1 0
0 -1
-1 0
rotting after applying adjacent rots {(0, 1), (1, 0)}
fresh after minus'ing {(2, 1), (1, 1), (0, 2), (2, 2)}
0 2
1 1
0 0
-1 1
1 1
2 0
1 -1
0 0
rotting after applying adjacent rots {(1, 1), (0, 2)}
fresh after minus'ing {(2, 1), (2, 2)}
1 2
2 1
1 0
0 1
0 3
1 2
0 1
-1 2
rotting after applying adjacent rots {(2, 1)}
fresh after minus'ing {(2, 2)}
2 2
3 1
2 0
1 1
rotting after applying adjacent rots {(2, 2)}
fresh after minus'ing set()








class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        row, col = len(grid), len(grid[0])
        rotting = {(i, j) for i in range(row) for j in range(col) if grid[i][j] == 2}
        fresh = {(i, j) for i in range(row) for j in range(col) if grid[i][j] == 1}
        timer = 0
        while fresh:
            if not rotting: return -1
            rotting = {(i+di, j+dj) for i, j in rotting for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)] if (i+di, j+dj) in fresh}
            fresh -= rotting
            timer += 1
        return timer




        '''

this is what i came up wth but i didnt do what i was doing so i quit .

        def get_rot():
            rotten = []
            for i in range(len(grid)):
                for j in range(len(grid[i])):
                    if (grid[i][j]==2):
                        rotten.append((i,j))
                        print(rotten)


        def rot_others(rot):
            for r in rot:
                a,b = r
                print(a,b)
                grid[a+1][b]=2
                grid[a][b+1]=2
                print(grid)
                orangesRotting(self,grid)

        rot_others(rotten)
        '''
