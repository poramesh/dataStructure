 Heap Insertion

Insert the new element at the end of the heap (next free position in the array).
"Heapify up": Compare it with its parent and swap if it's greater.
Repeat until the heap property is restored (or it reaches the root).

Time Complexity:
Worst case: O(log n) â€” the element bubbles up to the root
Best case: O(1) â€” the element is already in the correct position



insertion in the max heap:





        50
       /  \
    30      20
   /  \    /  \
  15  10   8   16


This corresponds to the array representation of the heap:
Index:    0   1   2   3   4   5   6
Array:   [50, 30, 20, 15, 10, 8, 16]


Step 1: Insert 60 at the End
Insert at the next available position (i.e., at index 7):
Array: [50, 30, 20, 15, 10, 8, 16, 60]

Visual (not yet heapified):

        50
       /  \
     30    20
    /  \   /  \
  15  10  8   16
 /
60


Step 2: Up-Heapify (Bubble Up)
Now we perform upward adjustment since 60 may violate the max-heap property.
Index of 60 is 7
Parent index = (7 - 1) // 2 = 3
Parent value = 15

Since 60 > 15, swap 60 and 15:
Index:  0   1   2   3   4   5   6  7
Array: [50, 30, 20, 60, 10, 8, 16, 15]

Updated tree:

        50
       /  \
     30    20
    /  \   /  \
  60  10  8   16
 /
15



Step 3: Continue Up-Heapify
New index of 60 is 3
Parent index = (3 - 1) // 2 = 1
Parent value = 30

Since 60 > 30, swap 60 and 30:

Index:  0   1   2   3   4   5   6  7
Array: [50, 60, 20, 30, 10, 8, 16, 15]

Updated tree:

        50
       /  \
     60    20
    /  \   /  \
  30  10  8   16
 /
15



Step 4: Continue Up-Heapify
New index of 60 is 1
Parent index = (1 - 1) // 2 = 0
Parent value = 50

Since 60 > 50, swap 60 and 50:
Index:  0   1   2   3   4   5   6  7
Array: [60, 50, 20, 30, 10, 8, 16, 15]
Final tree:

        60
       /  \
     50    20
    /  \   /  \
  30  10  8   16
 /
15


In a max-heap, the only requirement is:

        50
       /  \
     30    20
    /  \   /  \
  15  10  8   16

Every parent node must be greater than or equal to its child nodes.
But sibling nodes (like 15, 10, 8, 16) don't have to follow any order with respect to each other.




code:

import heapq

class MaxHeap:
    def __init__(self):
        self.heap = []

    def insert(self, val):
        self.heap.append(val)
        self._up_heapify(len(self.heap) - 1)

    def _up_heapify(self, idx):
        while idx > 0:
            parent = (idx - 1) // 2
            if self.heap[idx] > self.heap[parent]:
                self.heap[idx], self.heap[parent] = self.heap[parent], self.heap[idx]
                idx = parent
            else:
                break

    def get_heap(self):
        return self.heap



h = MaxHeap()
for num in [10, 20, 15, 30, 40]:
    h.insert(num)
print("Heap created by insertion:", h.get_heap())


heap.append(10) [10]
      10
_up_heapify(len(1)-1=1-1=0)
    while 0 is not greater 0 it doesnt do anything

heap.append(20) [10,20]
        10
       /
    20
_up_heapify(2-1=1):
    while 1>0:
       parent = idx //2 = 1//2 = 0
       if heap[1]>heap[0]:
          heap[1],heap[0] = heap[0],heap[1]// 20,10 = 10,20 //[20,10]
          idx=0
    while 0>0 it doenst enter loop.

heap.append(15) [20,10,15]
           20
          /  \
        10    15
_up_heapify(3-1=2):
    while 3>0:
       parent = 3-1//2=0
       if 15>20? no else: break


heap.append(15) [20,10,15,30]
           20
          /  \
        10    15
        /
      30
_up_heapify(4-1=3):
    while 4>0:
       parent = 4-1//2=1
       if 30>10? yes swap madi
          heap[parent], heap[idx] = heap[idx], heap[parent] //[20,30,15,10]
          idx=parent=1
    while 1>0:
       parent = 1-1//2=0
       if 30>20? yes swap madi
          heap[parent], heap[idx] = heap[idx], heap[parent] //[30,20,15,10]
          idx=parent=0

40 will also follow the same pattern:

           30
          /  \
        20    15
        /\
      10  40


           40
          /  \
        30    15
        /\
      10  20

    
    
 
     
