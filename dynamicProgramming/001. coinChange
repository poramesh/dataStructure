You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 
Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104




sol ::



def coinChange(coins, amount):
    # Initialize dp array with "infinity" values
    dp = [float('inf')] * (amount + 1)
    dp[0] = 0  # Base case: 0 coins needed to make amount 0

    for coin in coins:
        for x in range(coin, amount + 1):
            # If we can make (x - coin), then we can make x by adding this coin
            dp[x] = min(dp[x], dp[x - coin] + 1)

    # If dp[amount] is still inf, it's not possible
    return dp[amount] if dp[amount] != float('inf') else -1




Let’s walk through the same logic using:

coins = [1, 2, 5]
amount = 11
We want the minimum number of coins to make 11.

Initialize the dp array:
dp = [0, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf]
# Index = Amount, dp[i] = min coins to make amount i

navu yake ondu add madta idivi andre, lets say nav ivaga 5ne coin loop ge badidivi,
first loop alli, dp(5) = min(dp(5),dp(5-5)+1)=>5-5=0 and then adake one add madta idivi cause naav aa coin loop ali idivi.

mundina example bandu, lets say ivaga 6 ne range ge bandidivi for 5 coin looop? illi dp(6) = min(dp(6), dp(6-5)+1)
madidaga, namge siguthe 2 coin. 1du one coin(6-5 is 1, dp[1]=1 , this is already evaluated) and idake 5du ondu coin which is why we add +1.


Step 1: Coin = 1
We loop from 1 to 11:
dp[i] = dp[i - 1] + 1 (since we're just adding 1s)
Result after coin = 1:
dp = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]

Step 2: Coin = 2
We loop from 2 to 11:

dp[2] = min(2, dp[0]+1) = 1
dp[3] = min(3, dp[1]+1) = 2
dp[4] = min(4, dp[2]+1) = 2
dp[5] = min(5, dp[3]+1) = 3
dp[6] = min(6, dp[4]+1) = 3
dp[7] = min(7, dp[5]+1) = 4
dp[8] = min(8, dp[6]+1) = 4
dp[9] = min(9, dp[7]+1) = 5
dp[10] = min(10, dp[8]+1) = 5
dp[11] = min(11, dp[9]+1) = 6

Now:
dp = [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]

Step 3: Coin = 5
Loop from 5 to 11:

dp[5] = min(3, dp[0]+1) = 1
dp[6] = min(3, dp[1]+1) = 2
dp[7] = min(4, dp[2]+1) = 2 =>5+1
dp[8] = min(4, dp[3]+1) = 3
dp[9] = min(5, dp[4]+1) = 3
dp[10] = min(5, dp[5]+1) = 2
dp[11] = min(6, dp[6]+1) = 3

Final dp:
dp = [0, 1, 1, 2, 2, 1, 2, 2, 3, 3, 2, 3]

Final Answer:
dp[11] = 3

You can make 11 using:
5 + 5 + 1 → 3 coins




another method:

we gotta define float('inf') as infinity. if we jsut do ('inf') it wouldnt work. 

value = float('inf')
print(value + 1)  # This will output inf because infinity + 1 is still infinity

value = 'inf'
result = value + 1  # Trying to add 1 to the string 'inf' #TypeError: can only concatenate str (not "int") to str.


Even if it isnt sorted, it would just work fine. 

  
