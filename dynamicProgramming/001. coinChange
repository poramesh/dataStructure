You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.

 
Example 1:

Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:

Input: coins = [2], amount = 3
Output: -1

Example 3:

Input: coins = [1], amount = 0
Output: 0
 

Constraints:

1 <= coins.length <= 12
1 <= coins[i] <= 231 - 1
0 <= amount <= 104



we gotta define float('inf') as infinity. if we jsut do ('inf') it wouldnt work. 

value = float('inf')
print(value + 1)  # This will output inf because infinity + 1 is still infinity

value = 'inf'
result = value + 1  # Trying to add 1 to the string 'inf' #TypeError: can only concatenate str (not "int") to str

  

  class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:

        dp = (amount+1)*[float('inf')]

        dp[0] =0
        coins.sort()

        for i in range(1, amount+1):
            for c in coins:
                if i-c<0: break
                if dp[i-c]!=float('inf'):
                    dp[i] = min(dp[i-c]+1, dp[i]) #The +1 represents the fact that you've used one more coin (coin c) to go from amount i - c to amount i.

        
        return -1 if dp[amount] == float('inf') else dp[amount]

o/p:

[200,50,150,400]
[50,150,200,400]

i: 50  c: 50  dp[i]: 1  i-c: 0  dp[i-c]: 0  dp[i-c]+1: 1
i: 100  c: 50  dp[i]: 2  i-c: 50  dp[i-c]: 1  dp[i-c]+1: 2
i: 150  c: 50  dp[i]: 3  i-c: 100  dp[i-c]: 2  dp[i-c]+1: 3
i: 150  c: 150  dp[i]: 1  i-c: 0  dp[i-c]: 0  dp[i-c]+1: 1
i: 200  c: 50  dp[i]: 2  i-c: 150  dp[i-c]: 1  dp[i-c]+1: 2
i: 200  c: 150  dp[i]: 2  i-c: 50  dp[i-c]: 1  dp[i-c]+1: 2
i: 200  c: 200  dp[i]: 1  i-c: 0  dp[i-c]: 0  dp[i-c]+1: 1
i: 250  c: 50  dp[i]: 2  i-c: 200  dp[i-c]: 1  dp[i-c]+1: 2
i: 250  c: 150  dp[i]: 2  i-c: 100  dp[i-c]: 2  dp[i-c]+1: 3
i: 250  c: 200  dp[i]: 2  i-c: 50  dp[i-c]: 1  dp[i-c]+1: 2
i: 300  c: 50  dp[i]: 3  i-c: 250  dp[i-c]: 2  dp[i-c]+1: 3
i: 300  c: 150  dp[i]: 2  i-c: 150  dp[i-c]: 1  dp[i-c]+1: 2
i: 300  c: 200  dp[i]: 2  i-c: 100  dp[i-c]: 2  dp[i-c]+1: 3
i: 350  c: 50  dp[i]: 3  i-c: 300  dp[i-c]: 2  dp[i-c]+1: 3
i: 350  c: 150  dp[i]: 2  i-c: 200  dp[i-c]: 1  dp[i-c]+1: 2
i: 350  c: 200  dp[i]: 2  i-c: 150  dp[i-c]: 1  dp[i-c]+1: 2
i: 400  c: 50  dp[i]: 3  i-c: 350  dp[i-c]: 2  dp[i-c]+1: 3
i: 400  c: 150  dp[i]: 3  i-c: 250  dp[i-c]: 2  dp[i-c]+1: 3
i: 400  c: 200  dp[i]: 2  i-c: 200  dp[i-c]: 1  dp[i-c]+1: 2
i: 400  c: 400  dp[i]: 1  i-c: 0  dp[i-c]: 0  dp[i-c]+1: 1
i: 450  c: 50  dp[i]: 2  i-c: 400  dp[i-c]: 1  dp[i-c]+1: 2
i: 450  c: 150  dp[i]: 2  i-c: 300  dp[i-c]: 2  dp[i-c]+1: 3
i: 450  c: 200  dp[i]: 2  i-c: 250  dp[i-c]: 2  dp[i-c]+1: 3
i: 450  c: 400  dp[i]: 2  i-c: 50  dp[i-c]: 1  dp[i-c]+1: 2
i: 500  c: 50  dp[i]: 3  i-c: 450  dp[i-c]: 2  dp[i-c]+1: 3
i: 500  c: 150  dp[i]: 3  i-c: 350  dp[i-c]: 2  dp[i-c]+1: 3
i: 500  c: 200  dp[i]: 3  i-c: 300  dp[i-c]: 2  dp[i-c]+1: 3
i: 500  c: 400  dp[i]: 3  i-c: 100  dp[i-c]: 2  dp[i-c]+1: 3
i: 550  c: 50  dp[i]: 4  i-c: 500  dp[i-c]: 3  dp[i-c]+1: 4
i: 550  c: 150  dp[i]: 2  i-c: 400  dp[i-c]: 1  dp[i-c]+1: 2
i: 550  c: 200  dp[i]: 2  i-c: 350  dp[i-c]: 2  dp[i-c]+1: 3
i: 550  c: 400  dp[i]: 2  i-c: 150  dp[i-c]: 1  dp[i-c]+1: 2
i: 600  c: 50  dp[i]: 3  i-c: 550  dp[i-c]: 2  dp[i-c]+1: 3
i: 600  c: 150  dp[i]: 3  i-c: 450  dp[i-c]: 2  dp[i-c]+1: 3
i: 600  c: 200  dp[i]: 2  i-c: 400  dp[i-c]: 1  dp[i-c]+1: 2
i: 600  c: 400  dp[i]: 2  i-c: 200  dp[i-c]: 1  dp[i-c]+1: 2
i: 650  c: 50  dp[i]: 3  i-c: 600  dp[i-c]: 2  dp[i-c]+1: 3
i: 650  c: 150  dp[i]: 3  i-c: 500  dp[i-c]: 3  dp[i-c]+1: 4
i: 650  c: 200  dp[i]: 3  i-c: 450  dp[i-c]: 2  dp[i-c]+1: 3
i: 650  c: 400  dp[i]: 3  i-c: 250  dp[i-c]: 2  dp[i-c]+1: 3
i: 700  c: 50  dp[i]: 4  i-c: 650  dp[i-c]: 3  dp[i-c]+1: 4
i: 700  c: 150  dp[i]: 3  i-c: 550  dp[i-c]: 2  dp[i-c]+1: 3
i: 700  c: 200  dp[i]: 3  i-c: 500  dp[i-c]: 3  dp[i-c]+1: 4
i: 700  c: 400  dp[i]: 3  i-c: 300  dp[i-c]: 2  dp[i-c]+1: 3
i: 750  c: 50  dp[i]: 4  i-c: 700  dp[i-c]: 3  dp[i-c]+1: 4
i: 750  c: 150  dp[i]: 3  i-c: 600  dp[i-c]: 2  dp[i-c]+1: 3
i: 750  c: 200  dp[i]: 3  i-c: 550  dp[i-c]: 2  dp[i-c]+1: 3
i: 750  c: 400  dp[i]: 3  i-c: 350  dp[i-c]: 2  dp[i-c]+1: 3
i: 800  c: 50  dp[i]: 4  i-c: 750  dp[i-c]: 3  dp[i-c]+1: 4
i: 800  c: 150  dp[i]: 4  i-c: 650  dp[i-c]: 3  dp[i-c]+1: 4
i: 800  c: 200  dp[i]: 3  i-c: 600  dp[i-c]: 2  dp[i-c]+1: 3
i: 800  c: 400  dp[i]: 2  i-c: 400  dp[i-c]: 1  dp[i-c]+1: 2
i: 850  c: 50  dp[i]: 3  i-c: 800  dp[i-c]: 2  dp[i-c]+1: 3
i: 850  c: 150  dp[i]: 3  i-c: 700  dp[i-c]: 3  dp[i-c]+1: 4
i: 850  c: 200  dp[i]: 3  i-c: 650  dp[i-c]: 3  dp[i-c]+1: 4
i: 850  c: 400  dp[i]: 3  i-c: 450  dp[i-c]: 2  dp[i-c]+1: 3
i: 900  c: 50  dp[i]: 4  i-c: 850  dp[i-c]: 3  dp[i-c]+1: 4
i: 900  c: 150  dp[i]: 4  i-c: 750  dp[i-c]: 3  dp[i-c]+1: 4
i: 900  c: 200  dp[i]: 4  i-c: 700  dp[i-c]: 3  dp[i-c]+1: 4
i: 900  c: 400  dp[i]: 4  i-c: 500  dp[i-c]: 3  dp[i-c]+1: 4
i: 950  c: 50  dp[i]: 5  i-c: 900  dp[i-c]: 4  dp[i-c]+1: 5
i: 950  c: 150  dp[i]: 3  i-c: 800  dp[i-c]: 2  dp[i-c]+1: 3
i: 950  c: 200  dp[i]: 3  i-c: 750  dp[i-c]: 3  dp[i-c]+1: 4
i: 950  c: 400  dp[i]: 3  i-c: 550  dp[i-c]: 2  dp[i-c]+1: 3
i: 1000  c: 50  dp[i]: 4  i-c: 950  dp[i-c]: 3  dp[i-c]+1: 4
i: 1000  c: 150  dp[i]: 4  i-c: 850  dp[i-c]: 3  dp[i-c]+1: 4
i: 1000  c: 200  dp[i]: 3  i-c: 800  dp[i-c]: 2  dp[i-c]+1: 3
i: 1000  c: 400  dp[i]: 3  i-c: 600  dp[i-c]: 2  dp[i-c]+1: 3
