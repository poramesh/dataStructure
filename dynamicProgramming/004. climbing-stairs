Climbing Stairs
Problem Statement:
You are climbing a staircase. It takes n steps to reach the top.
Each time you can either climb 1 or 2 steps.
Return the number of distinct ways to reach the top.

Example:

n = 4
# Output: 5
# Explanation: [1,1,1,1], [1,2,1], [2,1,1], [1,1,2], [2,2]



sol:


def climbStairs(n):
    if n == 1:
        return 1
    
    # Initialize the base cases
    first = 1  # ways to reach step 1
    second = 2  # ways to reach step 2
    
    # Calculate the number of ways for all steps from 3 to n
    for i in range(3, n + 1):
        current = first + second
        first = second
        second = current
    
    return second


explanation:

If there's only 1 step (n == 1), there's only 1 way to reach the top (just take 1 step).
If there are 2 steps (n == 2), there are 2 ways to reach the top: [1, 1] or [2].
For n >= 3, the number of ways to reach step n is the sum of ways to reach step n-1 and n-2 because you can either take a 1-step or a 2-step.
We use two variables, first and second, to store the number of ways to reach steps n-1 and n-2, and update them iteratively as we calculate the number of ways to reach the top.


For n = 5, we trace like this:
first = 1 (ways to reach step 0)
second = 1 (ways to reach step 1)

i = 2 → current = 1 + 1 = 2     → first = 1, second = 2
i = 3 → current = 1 + 2 = 3     → first = 2, second = 3
i = 4 → current = 2 + 3 = 5     → first = 3, second = 5
i = 5 → current = 3 + 5 = 8     → first = 5, second = 8



Use the array version if you need to remember all previous results (e.g., for backtracking or reconstruction of paths).
Use the two-variable version if you only care about the final number of ways and want better space efficiency.

(or)


def climbStairs(n):
    # Base cases
    if n == 1:
        return 1
    
    # dp[i] will store the number of ways to reach step i
    dp = [0] * (n + 1)
    
    # Initializing base cases
    dp[0] = 1  # There's 1 way to reach step 0 (do nothing)
    dp[1] = 1  # There's 1 way to reach step 1 (just one step)
    
    # Fill the dp array
    for i in range(2, n + 1):
        dp[i] = dp[i - 1] + dp[i - 2]
    
    return dp[n]



Why is dp[0] = 1 and not dp[0] = 0?
dp[0] = 1 because there is 1 way to be at the ground level (i.e., the base case) — that is, by doing nothing. You don't
need to take any steps to stay at the ground.
dp[0] represents the number of ways to reach step 0, which is just staying where you are. So, the answer is 1.



Example 1:

n = 4
print(climbStairs(n))  # Output: 5
Explanation: The different ways to reach the 4th step are:
[1, 1, 1, 1]
[1, 1, 2]
[1, 2, 1]
[2, 1, 1]
[2, 2]
So, the output is 5.



n = 5
print(climbStairs(n))  # Output: 8
Explanation: The different ways to reach the 5th step are:
[1, 1, 1, 1, 1]
[1, 1, 1, 2]
[1, 1, 2, 1]
[1, 2, 1, 1]
[2, 1, 1, 1]
[1, 2, 2]
[2, 1, 2]
[2, 2, 1]
So, the output is 8.



Step-by-Step Trace for n = 4:
Initialize dp = [0, 0, 0, 0, 0]
dp[0] = 1 (There’s 1 way to be at the ground level, by not taking any step)
Fill the dp array:
dp[1] = dp[0] = 1 (1 way to reach step 1: take a 1-step)
dp[2] = dp[1] + dp[0] = 1 + 1 = 2 (2 ways to reach step 2: [1, 1], [2])
dp[3] = dp[2] + dp[1] = 2 + 1 = 3 (3 ways to reach step 3: [1, 1, 1], [1, 2], [2, 1])
dp[4] = dp[3] + dp[2] = 3 + 2 = 5 (5 ways to reach step 4: [1, 1, 1, 1], [1, 2, 1], [2, 1, 1], [1, 1, 2], [2, 2])
Final dp array: [1, 1, 2, 3, 5]
The result is dp[4] = 5





Feature        	DP Array	                                                Two Variables
Memory Usage	  O(n) 	                                                    O(1)
Time Complexity	O(n)	                                                    O(n)
Use Case	      Useful when you want to keep track of all sub-results    	Best for optimizing space
