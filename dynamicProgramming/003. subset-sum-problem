Problem Statement:
Given a list of positive integers nums and an integer target, determine if there exists a subset of nums that adds up exactly to target.
Return True if such a subset exists, otherwise return False.

Example:

nums = [3, 34, 4, 12, 5, 2]
target = 9
# Output: True (because 4 + 5 = 9)


nums = [1, 2, 3, 7]
target = 6
# Output: True  → 3 + 2 + 1 = 6 OR 3 + 2 + 1 = 6


nums = [5, 10, 12, 18]
target = 4
# Output: False  → All numbers are greater than 4


def subset_sum(nums, target):
    dp = [False] * (target + 1)
    dp[0] = True  # Base case: sum 0 is always possible with an empty subset

    for num in nums:
        for t in range(target, num - 1, -1):
            if dp[t - num]:
                dp[t] = True

    return dp[target]

nums = [3, 34, 4, 12, 5, 2]
target = 9
print(subset_sum(nums, target))  # Output: True





Step-by-step using DP
We use a dp array where dp[i] will be True if we can make a sum of i from the given numbers.

Initial setup:
dp = [True, False, False, False, False, False, False, False, False, False]
         0     1     2     3     4     5     6     7     8     9
Only dp[0] = True because we can always make 0 by choosing nothing.

Process each number in nums
Number = 3
We go backwards from 9 to 3:
dp[3] = dp[3 - 3] = dp[0] = True
Now:
dp = [True, False, False, True, False, False, False, False, False, False]

Number = 34
range(9, 33, -1)
This gives you an empty range, so the inner loop is skipped entirely.
Too big. It doesn't affect anything (since we go from target down to 34, and target is 9).

Number = 4
Check from t = 9 to t = 4:
dp[7] = dp[7 - 4] = dp[3] = True → dp[7] = True
dp[4] = dp[4 - 4] = dp[0] = True → dp[4] = True
dp = [True, False, False, True, True, False, False, True, False, False]

Number = 12
Too big again → no change.

Number = 5
From 9 → 5:
dp[9] = dp[4] = True → dp[9] = True
dp[8] = dp[3] = True → dp[8] = True
dp[5] = dp[0] = True → dp[5] = True
dp = [True, False, False, True, True, True, False, True, True, True]

Number = 2
Update from 9 → 2:
Already we have dp[9] = True, so no need to go further.
final :dp = [True, False, False, True, True, True, False, True, True, True]

Final Answer:
dp[9] = True → We can make sum 9 using a subset of [3, 34, 4, 12, 5, 2]

Example subset: 4 + 5 = 9








