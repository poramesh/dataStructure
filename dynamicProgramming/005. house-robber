Problem Statement:
You are a professional robber planning to rob houses along a street.
Each house has a certain amount of money stashed, but adjacent houses have security systems connected — robbing two adjacent houses will trigger the alarm.

Given a list of non-negative integers representing the amount of money in each house, determine the maximum amount you can rob without robbing two adjacent houses.

Example:
nums = [2, 7, 9, 3, 1]
# Output: 12
# Explanation: Rob house 1 (2) + house 3 (9) + house 5 (1) = 12


sol:
You’re given an array nums where nums[i] is the amount of money in the i-th house.
You can’t rob two adjacent houses — so you have to make a choice at each house:
Rob it and skip the previous one.
Skip it and take the max so far.


dp[i] means the maximum money you can rob from house 0 to house i, without robbing two adjacent houses.

base case:
If there are no houses → return 0.
If only 1 house → rob it.
If only 2 houses → rob the one with the most money.

dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])
dp[i - 1]: skip current house
dp[i - 2] + nums[i]: rob current house + whatever was optimal two steps back



def rob(nums):
    n = len(nums)
    if n == 0:
        return 0
    if n == 1:
        return nums[0]

    dp = [0] * n
    dp[0] = nums[0]
    dp[1] = max(nums[0], nums[1])

    for i in range(2, n):
        dp[i] = max(dp[i - 1], dp[i - 2] + nums[i])

    return dp[-1]


nums = [2, 7, 9, 3, 1]

dp[0] = 2
dp[1] = max(2, 7) = 7
dp[2] = max(7, 2 + 9) = 11
dp[3] = max(11, 7 + 3) = 11
dp[4] = max(11, 11 + 1) = 12

# Final answer: dp[4] = 12




(or)

Optimized Version (Using Two Variables)
You only ever need the last two values → so we use prev1 and prev2.

def rob(nums):
    if not nums:
        return 0
    if len(nums) == 1:
        return nums[0]

    prev2 = 0  # dp[i-2]
    prev1 = 0  # dp[i-1]

    for num in nums:
        current = max(prev1, prev2 + num)
        prev2 = prev1
        prev1 = current

    return prev1




nums = [2, 7, 9, 3, 1]

House	Money	Action	             Total
0	    2 	  Rob	                  2
1	    7	    Max(2, 7)	            7
2	    9	    Max(7, 2 + 9 = 11)	  11
3	    3	    Max(11, 7 + 3 = 10)	  11
4	    1	    Max(11, 11 + 1 = 12)	12
