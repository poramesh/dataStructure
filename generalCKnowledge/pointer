	int num = INT_MIN;
	int *var = &num; 
	int **ptr = &var;
        int **anotherptr = ptr; //ptr holds the adress of var, *ptr holds the adress of num ** ptr holds the vaue of num
        int ***triplestar = &ptr; // triplestar holds the adress of ptr, *triplestar gives the afress of var, **triplestar gives the adress of num and ***triplestar gives the value of nun  
	printf("%d ",num); //-2147483647 value of num
	printf("%d ",&num); //873550972 adress of num
	printf("%d ",var); //873550972 address of num
	printf("%d ",&var); //873550960 address of var
	printf("%d ",*var); //-2147483647 value of num
	printf("%d ",ptr); //873550960  address of var
	printf("%d ",**ptr); //-2147483647 value of num
	printf("%d ",*ptr); //873550972 adress of num
	printf("%d ",&ptr); //873550952 address of ptr
        printf("%d", **anotherptr) //-2147483647 prints value of num


triplestar → address of ptr
*triplestar → value of triplestar → ptr → address of var
**triplestar → value of *triplestar → var → address of num
***triplestar → value of **triplestar → num → INT_MIN


#include <stdio.h>
#include <limits.h>

int main() {
    int num = INT_MIN;
    int *var = &num; 
    int **ptr = &var;

    printf("num: %d\n", num);            // Value of num: -2147483648
    printf("&num: %p\n", (void*)&num);   // Address of num: 0x7ffd7cd441ac
    printf("var: %p\n", (void*)var);     // Address of num (stored in var): 0x7ffd7cd441ac
    printf("&var: %p\n", (void*)&var);   // Address of var: 0x7ffd7cd441a0: 0x7ffd7cd441a0
    printf("*var: %d\n", *var);          // Value of num (dereferenced var): -2147483648
    printf("ptr: %p\n", (void*)ptr);     // Address of var (stored in ptr): 0x7ffd7cd441a0
    printf("**ptr: %d\n", **ptr);        // Value of num (dereferenced ptr): -2147483648
    printf("*ptr: %p\n", (void*)*ptr);   // Address of num (dereferenced ptr): 0x7ffd7cd441ac
    printf("&ptr: %p\n", (void*)&ptr);   // Address of ptr: 0x7ffd7cd44198

    return 0;
}




and more on null pointer


int *num = 0;         // num is a pointer to int, initialized to NULL (0)
int **var = &num;     // var is a pointer to pointer to int, pointing to num
So in memory terms:

num holds the value 0 (NULL) → it does not point to any valid integer
var holds the address of num

Now:
*var means:
Dereference var → you get what it points to → that's num
So *var is equivalent to num, which holds the value 0

