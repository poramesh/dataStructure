void*


void* is a generic pointer type in C. It can point to any data type, making it very flexible. Here are some common uses of void*:

Generic Pointers:
void* is often used to create functions that can handle pointers to any data type.

Example:
void printData(void *data, char type) {
    switch(type) {
        case 'i': // Integer
            printf("%d\n", *(int*)data);
            break;
        case 'f': // Float
            printf("%f\n", *(float*)data);
            break;
        case 'c': // Character
            printf("%c\n", *(char*)data);
            break;
    }
}

int main() {
    int i = 42;
    float f = 3.14;
    char c = 'a';

    printData(&i, 'i');
    printData(&f, 'f');
    printData(&c, 'c');

    return 0;
}

In this example, printData can print data of different types using a single function by interpreting the void* pointer according to the provided type.

Dynamic Memory Allocation:
Functions like malloc and calloc return void* because they allocate a block of memory without concern for what type of data will be stored there.

Example:

  int *array = (int*)malloc(10 * sizeof(int));
if (array != NULL) {
    for (int i = 0; i < 10; i++) {
        array[i] = i;
    }
    free(array);
}
Here, malloc returns a void*, which is cast to int* to be used as an array of integers.

