
Single quotes ('hello') are used to denote single characters in C. 'hello' is invalid syntax because it represents multiple 
characters, which isn't allowed.
Double quotes ("hello") are used to denote string literals in C. "hello" represents the string composed ofthe characters 
'h', 'e', 'l', 'l', 'o', and a terminating null character ('\0').


linear search:

struct item {
    char* key;
    int value;
} ;

struct item* linear_search(struct item* items, size_t size, const char* key) {
    for (size_t i=0; i<size; i++) {
        if (strcmp(items[i].key, key) == 0) {
            return &items[i];
        }
    }
    return NULL;
}

int main() {
    struct item items[] = {
        {"foo", 10}, {"bar", 42}, {"bazz", 36}, {"buzz", 7},
        {"bob", 11}, {"jane", 100}, {"x", 200}};
    size_t num_items = sizeof(items) / sizeof(item);

   struct item* found = linear_search(items, num_items, "bob");
    if (!found) {
        return 1;
    }
    printf("linear_search: value of 'bob' is %d\n", found->value);
    return 0;
}

(or)

// Online C compiler to run C program online
#include <stdio.h>
#include<stdbool.h>
#include<string.h>
struct item{
    char* key;
    int value;
};


bool linearSearch(int size, struct item items[], char* input){

    for (int i=0;i<size;i++){
        if(strcmp((items[i].key),input)==0){
            return 1;
        } 
    }
    return 0;

}

int main() {
    struct item items[] ={{"poo",1},{"moh",20},{"aki",40},{"faa",33},{"eee",11},{"nee",12}};
    int size = sizeof( items)/sizeof(struct item);
    //char *input = "poo"; or char input[] = "poo";  printf("%s",input);
    char *input = "aki";
    
    bool val = linearSearch(size, items, input);
    val==1?printf("foind"): printf("not found");
    
    

}

extra info:
-------
strcmp compares two strings character by character and returns:
A negative value if the first string is lexicographically less than the second.
Zero if the two strings are equal.
A positive value if the first string is lexicographically greater than the second.

------
#include <stdio.h>

struct item {
    char* key;
    int value;
};

int main() {
    printf("Size of struct item: %zu bytes\n", sizeof(struct item)); //16 
    return 0;
}
size of char* is 8
and size of int is 4

the totaly size of struct is 16 due to paddng. 
Padding is extra bytes added by the compiler to align data in memory.



