A left rotation operation on an array of size n shifts each of the array's elements 1 unit to the left. Given an integer, d, rotate the array that many steps left and return the result.

Example
d=2
arr=[1,2,3,4,5]
After 2 rotations, arr'=[3,4,5,1,2] .

Function Description

rotateLeft has the following parameters:
int d: the amount to rotate by
int arr[n]: the array to rotate

Returns
int[n]: the rotated array

Input Format

The first line contains two space-separated integers that denote n, the number of integers, and d, the number of left rotations to perform.
The second line contains n space-separated integers that describe arr[].

Constraints
1<=n<=10^5
1<=d<=n
1<=a[i]<=10^6

Sample Input

5 4
1 2 3 4 5

Sample Output
5 1 2 3 4





Solution
import math
import os
import random
import re
import sys


def rotateLeft(d, arr):
    # Write your code here
    n = len(arr)
    prr=[0]*n
    for i in range(n):
        prr[(i+n-d)%n]=arr[i
    return prr

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    first_multiple_input = input().rstrip().split()

    n = int(first_multiple_input[0])

    d = int(first_multiple_input[1])

    arr = list(map(int, input().rstrip().split()))

    result = rotateLeft(d, arr)

    fptr.write(' '.join(map(str, result)))
    fptr.write('\n')

lets come up w a sol to this:

'''
n=5
d=2 
a = [1,2,3,4,5]
[2,3,4,5,1] =>[3,4,5,1,2] ,  2 needs to be at n-d postion and we need to add i to keep in right place, %n to keep it in the check. 
i=0 arr[(n-d+i)%n] = arr[5-2] = arr[0,0,0,1,0]
i=1 arr[(n-d+i)%n] = arr[5-1-1] = arr[0,0,0,1,2]

arr[:n-d%n]+ arr[n-d%n:]
'''

""""
Each time I read an element of the array from the input, I directly assign it to the array at the speific index after shifting. d left rotations equal (n-d) right rotations. 
The array has a size of n, so when the index (i+n-d) is equal to n, the index actually goes back to the starting index. 
I use mod to get the correct index where I want to assign the element when the index is larger than n.
""""



(or)
now d is 2 
arr[2:]+arr[0:2]
3,4,5 + 0,1
for value in (arr[d:] + arr[0:d]):  
    print value,

(or)

when d is greater than n
shifted = a[d%n:] + a[:d%n]
#print(*printed) // if star is not mentioned then it will be printed as list 
    for num in shifted:
        print(num, end=' ') 

//end is provided so that it wouldnt go to the next line. without end it woild pront like 1 \n 2 \n and so on if we provid end then it will be seperated with space
//end specifies what to print at the end of the output. By default, it's a newline character ('\n').
//When end=' ', it means that instead of ending with a newline character, it will end with a space character (' '). So, the next call to print() will start printing on the same line, separated by a space.


\''''''''/
print(*printed) 
 will print each element of the printed iterable separated by spaces. This is because the * operator unpacks the elements of the iterable and passes them as
separate arguments to the print() function.
printed = [1, 2, 3]
print(printed) will [1,2,3]
print(*printed) will print 1 2 3

Unpacking refers to extracting individual elements from a container, such as a list, tuple, or dictionary, and assigning them to separate variables.

In Python, you can unpack elements using the * operator for iterable unpacking and the ** operator for dictionary unpacking.

Iterable unpacking (using *) is used with sequences like lists or tuples. For example:

my_list = [1, 2, 3]
a, b, c = my_list
Here, a, b, and c are assigned the values 1, 2, and 3, respectively. This is unpacking my_list into individual variables.
def my_function(a, b, c):
    print(a, b, c)

my_list = [1, 2, 3]
my_function(*my_list)

