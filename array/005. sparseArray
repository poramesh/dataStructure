There is a collection of input strings and a collection of query strings. For each query string, determine how many times it occurs in the list of input strings. Return an array of the results.

Example

stringList = ['ab','ab','abc']
queries = ['ab','abc','bc']

There are 2 instances of 'ab', 1  of 'abc' and 0 of 'bc'. For each query, add an element to the return array, results=[2,1,0].

Function Description

Complete the function matchingStrings in the editor below. The function must return an array of integers representing the frequency of occurrence of each query string in stringList.

matchingStrings has the following parameters:

> string stringList[n] - an array of strings to search
> string queries[q] - an array of query strings

Returns
> int[q]: an array of results for each query

Input Format

The first line contains and integer n, the size of stringList[].
Each of the next n lines contains a string stringList[i].
The next line contains q, the size of queries[].
Each of the next q lines contains a string queries[i].

Constraints
1<=n<=1000
1<=q<=1000
1<=|stringList[i]|,|queries[i]|<=20


Solution:

n = int(input().strip())
stringList = []

for _ in range(n):
    stringList.append(input().strip())

q = int(input().strip())
queryList = []

for _ in range(q):
    queryList.append(input().strip())


for i in range(q):
    max =0 
    for j in range(n):
        if queryList[i] == stringList[j]:
            max=max+1
    print(max)
        
(or)

from collections import Counter

cnt = Counter([input().strip() for _ in range(int(input().strip()))]) 

for _ in range(int(input().strip())):
    print(cnt[input().strip()])

(or)

import collections

values = collections.defaultdict(int)
for _ in range(int(input())):
    values[input()] += 1
for _ in range(int(input())):
    print(values[input()])

defaultdict helps to intialise value to zero
