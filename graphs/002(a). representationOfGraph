graph is ordered pair of set (V,E)

to create store the graph in computer memory. the simplest thing we can do is , we create a list to store vertices and edges.

we can use array of appropriate size or dynamic list.



   A -- B
 / |    / \
C   D   E  F 
\    \ /  /
  G -- H

with weight
        5
    A -------B
7 /  | 3    /2 \10
/    |     /    |
C    D     E    F 
 \ 11  \   /9  /
1   \    \ / /4
    G ----H
       6
vertex list = A B C D E F G H 
edge = an object wiht two field. structure or class with two fields. one to store startVertext and another to store
endVertex.

struct edge{
   char * startVertex;
   char *endVertex;
   int weight;
};

or

class edge{
  string startVertex;
  string endVertex;
  int weight;
}

struct edge edgeList[max_size] or string vertex_list[max_size ]

edge = each row has two boxes.
A B 5
A C 7
A D 3
B E 2
B F 10 we can also F B but we just need one of them.
C G 1
D H 11
E H 9
F H 4
G H 6

our graph can also have weight associated witih edge.

we have also to look at cost:
1. time-cost of operations.(time complexity)
2. memory usage (space complexiity) rate of size of memory consumed with respect to data.

it is expressed in BIG O notation.

we do not have to consume unreasonably high memory.

for the vertext list = rows. right now we just have a,b and so on but if it strings then it will cosnume more momery.

so we can have the reference of the string or have an index of vertex list.


https://youcademy.org/graph-with-edge-list/

this is helpful , go through it monkey aja


vertex list;
A 0
B 1
C 2
D 3
E 4
F 5 
G 6
H 7
vertext = will consume O|v|

edge list;
0 1 5
0 2 7
0 3 3
1 4 2
1 5 10 
2 6 1
3 7 11
4 7 9
5 7 4
6 7 6

this is better deign
space consumed = O|e|

overall space complexiity = O|v|+|e|

time cost of operation

how much time will we take to find all nodes adjacent to a given node?
we will have to perform linear search and go through all the entries in the edge list and find if the start and end node are given node. and for undirected graph 
we look for both start and end node. 

runnig time will be proportional big O of no of edges.

check if given two nodes are connected?
here as well we will have to perform linear search on edge list. we will have to look at all the entries in the edge list
so worst case proporational to no of edges. 
O(E)

if V = n 
then 0<= E <= n*n-1 if directed 
    0 <=E<= n*n-1/2 if undirected


v = n        v*v-1 =v2-v  BIG(v^2) 
10           90
100          9900
1000         999000

this is not efficient for performing operation.
we need to scan the whole list and it can be v large and it is costly.






____________________________________________________________________________
// Online C compiler to run C program online
#include <stdio.h>
#include <string.h>
#define max_size 10

struct edge{
    int weight;
    char* startVertex;
    char* endVertex;
};

struct edge edgeList[max_size];
int i =0;

void insertEdges(int value,char* s, char* e){
    if(i<max_size){
        //printf("s=%s\n",s); //will print the same value = A
        //printf("char*=%s\n",(char*)s); //will print the same value = A
        edgeList[i].weight = value;
        edgeList[i].startVertex = s;
        edgeList[i].endVertex = (char*)e;
        i++;
    }else{
        printf("edge list is full\n");
    }
    
}

void print(){
    for( int j=0; j<i; j++){
        printf("%s<->%s:%d \n", edgeList[j].startVertex, edgeList[j].endVertex,  edgeList[j].weight);
    }
}

int findTheCountOfAdjacentNode(char* adjacentValue){
    int count = 0;
    for(int j=0;j<i;j++){
        if(edgeList[j].startVertex==adjacentValue || edgeList[j].endVertex==adjacentValue){
            count++;
        }
    }
    return count;
}

int main() {
    insertEdges(5,"A","B");
    insertEdges(7,"A","C");
    insertEdges(3,"A","D");
    insertEdges(2,"B","E");
    insertEdges(10,"B","F");
    insertEdges(1,"C","G");
    insertEdges(11,"D","H");
    insertEdges(9,"E","H");
    insertEdges(4,"F","H");
    insertEdges(6,"G","H");
    print();
    int NoOfadjacentNode = findTheCountOfAdjacentNode("H");
    printf("\n");
    printf("The total number of connected nodes are %d", NoOfadjacentNode);
    
}

o/p:

A<->B:5 
A<->C:7 
A<->D:3 
B<->E:2 
B<->F:10 
C<->G:1 
D<->H:11 
E<->H:9 
F<->H:4 
G<->H:6 

The total number of connected nodes are 4


/***
 *Array of Pointers to Structures
 * 
 * to find all nodes adjacent to a given node?
 * 
 * 
 * The key difference between using a direct structure array (struct edge edgeList[MAX_SIZE];) and using
an array of pointers to structures (struct edge* edgeList[MAX_SIZE];) lies in memory allocation, access patterns, and flexibility.
 
WHEN WE TO USE->

Memory for the array of pointers is allocated at compile time.
Each element (structure) must be dynamically allocated at runtime using malloc.

struct edge* edgeList[MAX_SIZE];
int i = 0;

void insertEdge(int value, const char* s, const char* e) {
    if (i < MAX_SIZE) {
        edgeList[i] = (struct edge*)malloc(sizeof(struct edge));
        if (edgeList[i] == NULL) {
            printf("Memory allocation failed\n");
            return;
        }
        edgeList[i]->weight = value;
        edgeList[i]->startVertex = strdup(s);  // Allocate and copy string
        edgeList[i]->endVertex = strdup(e);    // Allocate and copy string
        i++;
    } else {
        printf("Edge list is full.\n");
    }
}
 * 
 ***/

