      0   1   2   3   4   5   6   7
    +---+---+---+---+---+---+---+---+
0   | 0 | 1 | 1 | 1 | 0 | 0 | 0 | 0 |

0 means self loop
row is start point
col is end point

0 is taking up the extra memory there will be a lot of 0s so it will be sparse.

for a social network with a billion(10^9) users:
row size = 10^9

if i have 1000 friends
then no of 1s = 1000 (1kb)
no of 0s will be 10^9-1000 (1 gb)

0 is redunant info/extra memory

we can just have a list of node tahts connected.
{1,2,3} or {b,c,d}
lets just store the indices then the name.

 0  1  2
+--+--+--+
 1  2  3

in earlier implementaion, index was represeting the index of node  in the graph, value represented if there was a conenction

here index doesnt represent anything. the value are actual indices of the nodes to which we are connected.
instead of array we shall use linked list.

   A -- B
 / |    / \
C   D   E  F 
\    \ /  /
  G -- H

we can also use tree, like bst. 

  +---+---+---+
0 | 1 | 2 | 3 |
  +---+---+---+
1 | 0 | 4 | 5 |
  +---+---+---+
2 | 0 | 6 | 
  +---+---+
3 | 0 | 7 | 
  +---+---+
4 | 1 | 7 |  
  +---+---+
5 | 1 | 7 | 
  +---+---+
6 | 2 | 7 | 
  +---+---+---+---+ 
7 | 3 | 6 | 4 | 5 |
  +---+---+---+---+

1th node is connected to 0th,4th,5th.

here we are consuming a lot less memory.

we can create array of pointers of array of 8.
 int *A[8];
A[0] = new int[3];
A[1] = new int[3];
A[2] = new int[2];
....
A[7] = new int[4];

space consumption is proportional to no of edges. 
in most graphs e<<v^2

for undirected graph we will consuming exactly 2*e memory.

finding if two nodes are connected or not?
here we have to scan through row.

when we have to find if there is connection between 0 to 7 then we will have to perform linear search on 0th row.

we can keep it all sorted and perform binary search.

O(v) - linear search 
and O(logv) - binary search


                      2d array   list
            
finding adjacent nodes   O(v)    O(v)

finding if two nodes      O(1)   O(v)
are conencted 


we are not saving much on time but still when we are dealing with sparse graph, then it woudlnt be so worse case. 

for a social network with billion users:

if max no of friends = 10^4

if machine can scan 10^6 cells/second

                        2d array                        list
            
finding adjacent nodes   10^9/10^6=1000sec=16.6min          10^4/10^6=10^-2 = 10 ms

finding if two nodes      1/10^6 sec 1ms to read that one cell      10ms(we need to scan a row since we dont) 
are conencted            which we know what to scan                       exact cell


machine cant make users wwait for so much time 
it does save time and space, when graph is sparse.


what would we do if graph changes?
what if there is new edges is inserted or deleted?

flip the zero to in if its on 2D array.
if it was deletion then make the 1 -> 0

in the second structure, we just need to add the new edge in the row

adding is not easy in the arrays, if the arrray size is not enough.

this is the reasion why we use linked list.

struct node{
int data;
struct node* next;
};
struct node *A[8];


A[0] -> 1 -> 2 -> 3 -> NULL
A[1] -> 0 -> 4 -> 5 -> NULL
A[2] -> 0 -> 6 -> NULL
A[3] -> 0 -> 7 -> NULL
A[4] -> 1 -> 7 -> NULL
A[5] -> 1 -> 7 -> NULL
A[6] -> 2 -> 7 -> NULL
A[7] -> 3 -> 6 -> 4 -> 5 -> NULL


what we have here is adjanceny list.
if we had wieght then it will have antoher field, int weight;


space complexity: O(E+V)
               E<< V*V assming it is sparse matrix.

what if we add new connection/delete new connection?

what if instead of linked list to store all the infor about all neighbours  we use binary search tree?
do u think we would do better, cause time cost for searching, inserting and deleting a neighbour would reduce.


WITH THIS THOUGHT I WILL SIGN OFF, THIS IS IT FOR THIS LESSON

THANK YOU SO MUCH FOR TEACHING.




















1. Define the Node Structure
Define a structure for the nodes of the linked list, where each node represents a vertex connected to the current vertex.

#include <stdio.h>
#include <stdlib.h>

// Define the node structure for the adjacency list
typedef struct Node {
    int vertex;            // The vertex this node represents
    struct Node* next;     // Pointer to the next node in the list
} Node;


2. Define the Graph Structure
Define the structure for the graph, which includes an array of pointers to the linked list nodes.

// Define the graph structure
#define NUM_VERTICES 8  // Adjust as needed for your graph

typedef struct Graph {
    Node* adjLists[NUM_VERTICES]; // Array of adjacency lists
} Graph;



3. Initialize the Graph
Initialize the graph by setting all adjacency lists to NULL.
void initializeGraph(Graph* graph) {
    for (int i = 0; i < NUM_VERTICES; i++) {
        graph->adjLists[i] = NULL;  // Start with empty adjacency lists
    }
}



4. Add an Edge
Write a function to add an edge between two vertices. This function will add a new node to the linked list of the starting vertex.

void addEdge(Graph* graph, int startVertex, int endVertex) {
    // Create a new node for the end vertex
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = endVertex;
    newNode->next = graph->adjLists[startVertex];
    graph->adjLists[startVertex] = newNode;  // Insert node at the head of the list
}




5. Print the Graph
Write a function to print the adjacency list representation of the graph.


void printGraph(Graph* graph) {
    for (int i = 0; i < NUM_VERTICES; i++) {
        Node* temp = graph->adjLists[i];
        printf("A[%d] -> ", i);
        while (temp) {
            printf("%d -> ", temp->vertex);
            temp = temp->next;
        }
        printf("NULL\n");
    }
}


6. Main Function
Use the functions to create the graph and add edges as per the adjacency list provided.

int main() {
    Graph graph;

    // Initialize the graph
    initializeGraph(&graph);

//When passing graph by value, a copy is made, and modifications in the function do not affect the original graph.
//When passing graph by reference, the original graph is modified.

    // Add edges as per the adjacency list
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 0, 3);
    addEdge(&graph, 1, 0);
    addEdge(&graph, 1, 4);
    addEdge(&graph, 1, 5);
    addEdge(&graph, 2, 0);
    addEdge(&graph, 2, 6);
    addEdge(&graph, 3, 0);
    addEdge(&graph, 3, 7);
    addEdge(&graph, 4, 1);
    addEdge(&graph, 4, 7);
    addEdge(&graph, 5, 1);
    addEdge(&graph, 5, 7);
    addEdge(&graph, 6, 2);
    addEdge(&graph, 6, 7);
    addEdge(&graph, 7, 3);
    addEdge(&graph, 7, 6);
    addEdge(&graph, 7, 4);
    addEdge(&graph, 7, 5);

    // Print the adjacency list
    printGraph(&graph);

    // Clean up memory (optional but recommended)
    for (int i = 0; i < NUM_VERTICES; i++) {
        Node* temp = graph.adjLists[i];
        while (temp) {
            Node* next = temp->next;
            free(temp);
            temp = next;
        }
    }

    return 0;
}



complete code:

#include<stdio.h>
#define max_len 8
#include<stdlib.h>

/***
A[0] -> 1 -> 2 -> 3 -> NULL
A[1] -> 0 -> 4 -> 5 -> NULL
A[2] -> 0 -> 6 -> NULL
A[3] -> 0 -> 7 -> NULL
A[4] -> 1 -> 7 -> NULL
A[5] -> 1 -> 7 -> NULL
A[6] -> 2 -> 7 -> NULL
A[7] -> 3 -> 6 -> 4 -> 5 -> NULL
***/



struct Node{
    int vertex;
    struct Node * next;
};

struct Graph{
    struct Node * adjList[max_len];
};


void initialiseGraph(struct Graph *graph){

    for (int i=0;i<max_len;i++){
        graph->adjList[i] = NULL;
    }
}

void addEdge(struct Graph * graph, int startVertex, int endVertex){
    struct Node* newEdge = (struct Node*)(malloc(sizeof(struct Node)));
    newEdge->vertex = endVertex;
    newEdge->next = graph->adjList[startVertex];
    graph->adjList[startVertex] = newEdge;
}


void printEdges(struct Graph *graph){
    
    for (int i =0;i<max_len;i++){
        struct Node* temp = graph->adjList[i];
        printf("%d ",i);
        while(temp){
            printf("%d ",temp->vertex);
            temp = temp->next;
        }
        printf("\n");
    }
    
}


int main(){
    
    struct Graph graph; // it holds an instance of the Graph structure, which includes an array of pointers to Node structures. 
    
    initialiseGraph(&graph);
    
    addEdge(&graph, 0, 1);
    addEdge(&graph, 0, 2);
    addEdge(&graph, 0, 3);
    addEdge(&graph, 1, 0);
    addEdge(&graph, 1, 4);
    addEdge(&graph, 1, 5);
    addEdge(&graph, 2, 0);
    addEdge(&graph, 2, 6);
    addEdge(&graph, 3, 0);
    addEdge(&graph, 3, 7);
    addEdge(&graph, 4, 1);
    addEdge(&graph, 4, 7);
    addEdge(&graph, 5, 1);
    addEdge(&graph, 5, 7);
    addEdge(&graph, 6, 2);
    addEdge(&graph, 6, 7);
    addEdge(&graph, 7, 3);
    addEdge(&graph, 7, 6);
    addEdge(&graph, 7, 4);
    addEdge(&graph, 7, 5);
    
    printEdges(&graph);

}



o/p

0 3 2 1 
1 5 4 0 
2 6 0 
3 7 0 
4 7 1 
5 7 1 
6 7 2 
7 5 4 6 3 













 




