here this ques is solving a problem


Example 1:
Input: nums1 = [1,3,3,2], nums2 = [2,1,3,4], k = 3
Output: 12
Explanation: 
The four possible subsequence scores are:
- We choose the indices 0, 1, and 2 with score = (1+3+3) * min(2,1,3) = 7.
- We choose the indices 0, 1, and 3 with score = (1+3+2) * min(2,1,4) = 6. 
- We choose the indices 0, 2, and 3 with score = (1+3+2) * min(2,3,4) = 12. 
- We choose the indices 1, 2, and 3 with score = (3+3+2) * min(1,3,4) = 8.
Therefore, we return the max score, which is 12.





nums1 = [1, 3, 3, 2]
nums2 = [2, 1, 3, 4]
k = 3
n = len(nums1)

max_score = 0

def generate_combinations(start, path):
    global max_score

    if len(path) == k:
        sum1 = sum(nums1[i] for i in path)
        min2 = min(nums2[i] for i in path)
        score = sum1 * min2
        max_score = max(max_score, score)
        return

    for i in range(start, n):
        generate_combinations(i + 1, path + [i])

generate_combinations(0, [])
print("Max score:", max_score)



using custom module provided by python.


from itertools import combinations

nums1 = [1, 3, 3, 2]
nums2 = [2, 1, 3, 4]
k = 3

max_score = 0

for indices in combinations(range(len(nums1)), k):
    sum_nums1 = sum(nums1[i] for i in indices)
    min_nums2 = min(nums2[i] for i in indices)
    score = sum_nums1 * min_nums2
    max_score = max(max_score, score)

print("Max score:", max_score)


This tries all groups of k indices, like:

(0, 1, 2)
(0, 1, 3)
(0, 2, 3)
(1, 2, 3)
