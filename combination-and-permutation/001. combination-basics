LIL knowledge in python:

path = [0, 1]
i = 2
new_path = path + [i]   # new_path becomes [0, 1, 2]

The order is preserved
The value i goes at the end of the path


How do we consider all different combinations of indices in general?


What are "combinations of indices"?
If you have a list of length n:
arr = [a, b, c, d]
The indices are: 0, 1, 2, 3.

Now, if you want to try every possible group of k distinct indices, say k = 2, you want:
(0,1), (0,2), (0,3), (1,2), (1,3), (2,3)

These are combinations: order doesn't matter, no repetitions.


How do we generate them ourselves?
Let’s say n = 4, k = 2.
We want to choose 2 indices out of 0 to 3 — without repeats, and in increasing order (to avoid duplicates).

Basic recursive idea:
At each step:
1. Pick the next index (must be greater than the last one).
2. Add it to a temporary list (path).
3. Repeat until length k.


Simple example: n = 4, k = 2

def generate_combinations(start, path):
    if len(path) == 2:
        print(path)
        return

    for i in range(start, 4):
        generate_combinations(i + 1, path + [i])

generate_combinations(0, [])

generate_combinations(start=0,path=[]):
  if len(path) ==2 : no
  for 0 in range(start=0,4):      
    generate_combinations(start=0+1,path=[]+[0]=[0])
       if len of path is equal to 2? no
       for 1 in range(start=1,4):
           generate_combinations(1+1=2,[0]+[1]=[0,1])
              if len of path is equal to 2? yes: path = [0,1] return
       for 2 in range(start=1,4):
           generate_combinations(2+1=3,[0]+[2]=[0,2])
              if len of path is eqal to 2? yes: path= [0,2] return
       for 3 in range(start=1,4):
           generate_combinations(3+1=4,[0]+[3]=[0,3])
              if len of path is eqal to 2? yes: path = [0,3] return
for 1 in range(start=0,4):      
    generate_combinations(start=1+1=2, path=[]+[1]=[1])
       if len of path is equal to 2? no
       for 2 in range(2,4):
           generate_combinations(2+1=3,[1]+[2]=[1,2])
              if len of path is equal to 2? yes: path=[1,2] return
       for 3 in range(2,4):
           generate_combinations(2+1=3,[1]+[3]=[1,3])
              if len of path is eqal to 2? yes: path=[1,3] return
for 2 in range(start=0,4):
   generate_combinations(start=2+1=3,path=[]+[2]=[2])
         if len of path is eqal to 2? no
         for 3 in range(3,4):
             generate_combinations(start=3+1=4,path=[2]+[3]=[2,3])
      
       


[0, 1]
[0, 2]
[0, 3]
[1, 2]
[1, 3]
[2, 3]





when k=4 and n=6

def generate_combinations(start, path):
    if len(path) == k:
        print(path)
        return

    for i in range(start, n):
        print(i,n,path)
        generate_combinations(i + 1, path + [i])
        
        
generate_combinations(0,[])


0 6 []
1 6 [0]
2 6 [0, 1]
3 6 [0, 1, 2]
path before exiting [0, 1, 2, 3]
4 6 [0, 1, 2]
path before exiting [0, 1, 2, 4]
5 6 [0, 1, 2]
path before exiting [0, 1, 2, 5]
3 6 [0, 1]
4 6 [0, 1, 3]
path before exiting [0, 1, 3, 4]
5 6 [0, 1, 3]
path before exiting [0, 1, 3, 5]
4 6 [0, 1]
5 6 [0, 1, 4]
path before exiting [0, 1, 4, 5]
5 6 [0, 1]
2 6 [0]
3 6 [0, 2]
4 6 [0, 2, 3]
path before exiting [0, 2, 3, 4]
5 6 [0, 2, 3]
path before exiting [0, 2, 3, 5]
4 6 [0, 2]
5 6 [0, 2, 4]
path before exiting [0, 2, 4, 5]
5 6 [0, 2]
3 6 [0]
4 6 [0, 3]
5 6 [0, 3, 4]
path before exiting [0, 3, 4, 5]
5 6 [0, 3]
4 6 [0]
5 6 [0, 4]
5 6 [0]
1 6 []
2 6 [1]
3 6 [1, 2]
4 6 [1, 2, 3]
path before exiting [1, 2, 3, 4]
5 6 [1, 2, 3]
path before exiting [1, 2, 3, 5]
4 6 [1, 2]
5 6 [1, 2, 4]
path before exiting [1, 2, 4, 5]
5 6 [1, 2]
3 6 [1]
4 6 [1, 3]
5 6 [1, 3, 4]
path before exiting [1, 3, 4, 5]
5 6 [1, 3]
4 6 [1]
5 6 [1, 4]
5 6 [1]
2 6 []
3 6 [2]
4 6 [2, 3]
5 6 [2, 3, 4]
path before exiting [2, 3, 4, 5]
5 6 [2, 3]
4 6 [2]
5 6 [2, 4]
5 6 [2]
3 6 []
4 6 [3]
5 6 [3, 4]
5 6 [3]
4 6 []
5 6 [4]
5 6 []

=== Code Execution Successful ===
