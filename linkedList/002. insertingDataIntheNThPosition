
c:-
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

struct node{
    int data;
    struct node* next;
};

struct node* head;

void insert(int x,int n){
   struct node* temp1 =  (struct node*)malloc(sizeof(struct node));
   temp1->data = x;
   temp1->next = NULL; 
   if(n==1){
       temp1->next=head;
       head=temp1;
   }else{
       struct node* temp2 = head;
       for(int i=1;i<n-1;i++){
           temp2 = temp2->next;
       }
     temp1->next=temp2->next;
     temp2->next=temp1;
   }
}

void print(){
   struct node* temp = head;
   printf("list is:" );
   while(temp!=NULL){
      printf("%d ",temp->data);
      temp=temp->next;
   }
   printf("\n");
}

int main(){
   head = NULL;
   insert(1,1);
   insert(2,2);
   insert(3,2);
   insert(4,1);
   insert(5,1);
   insert(8,4);
   print();
}

python:-
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        self.head = None

    def insert(self, x, n):
        new_node = Node(x)
        if n == 1:
            new_node.next = self.head
            self.head = new_node
        else:
            temp = self.head
            for _ in range(n - 2):
                if temp is None:
                    raise ValueError("Invalid position")
                temp = temp.next
            new_node.next = temp.next
            temp.next = new_node

    def print_list(self):
        temp = self.head
        print("List is:", end=" ")
        while temp:
            print(temp.data, end=" ")
            temp = temp.next
        print()

if __name__ == "__main__":
    linked_list = LinkedList()
    linked_list.insert(1, 1)
    linked_list.insert(2, 2)
    linked_list.insert(3, 2)
    linked_list.insert(4, 1)
    linked_list.insert(5, 1)
    linked_list.insert(8, 4)
    linked_list.print_list()

java:-

import java.util.Scanner;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;

    LinkedList() {
        this.head = null;
    }

    void insert(int x, int n) {
        Node newNode = new Node(x);
        if (n == 1) {
            newNode.next = head;
            head = newNode;
        } else {
            Node temp = head;
            for (int i = 1; i < n - 1; i++) {
                if (temp == null) {
                    throw new IllegalArgumentException("Invalid position");
                }
                temp = temp.next;
            }
            newNode.next = temp.next;
            temp.next = newNode;
        }
    }

    void printList() {
        Node temp = head;
        System.out.print("List is: ");
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        LinkedList linkedList = new LinkedList();
        linkedList.insert(1, 1);
        linkedList.insert(2, 2);
        linkedList.insert(3, 2);
        linkedList.insert(4, 1);
        linkedList.insert(5, 1);
        linkedList.insert(8, 4);
        linkedList.printList();
    }
}
