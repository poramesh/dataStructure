Selection Sort is a comparison-based, in-place sorting algorithm. It repeatedly selects the minimum (or maximum) element from the unsorted
part and places it in the correct position of the sorted part.



void selectionSort(int A[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (A[j] < A[minIndex]) {
                minIndex = j;
            }
        }
        // Swap A[i] and A[minIndex]
        int temp = A[i];
        A[i] = A[minIndex];
        A[minIndex] = temp;
    }
}


Outer loop runs n-1 times
Inner loop runs decreasing times: n-1, n-2, ..., 1
Total comparisons = n(n-1)/2
Time Complexity: O(nÂ²)
Space Complexity: O(1) (in-place)


A = [7, 4, 1, 6, 3]

Pass | i | Min Value | Swap Index  | Array After Pass
1    | 0 | 1         | 2           | [1, 4, 7, 6, 3]
2    | 1 | 3         | 4           | [1, 3, 7, 6, 4]
3    | 2 | 4         | 4           | [1, 3, 4, 6, 7]
4    | 3 | 6         | 3 (no swap) | [1, 3, 4, 6, 7]
5    | 4 | 7         | -           | [1, 3, 4, 6, 7]
