What does it mean to call it a factor?

calculating the factors of a number means finding all the integers that divide it exactly (without leaving a remainder).

A factor of a number n is any number i such that:
n mod i = 0 (n % i=0)
This means i divides n perfectly.


Steps to Find Factors of a Number n:
Loop from 1 to sqrt(n) (for efficiency).
If n % i == 0, then both i and n // i are factors.


Example: Factors of 36
Divisors from 1 to √36 = 6:

| i | 36 % i | Factor? | Paired Factor |
| - | ------ | ------- | ------------- |
| 1 | 0      | Yes     | 36            |
| 2 | 0      | Yes     | 18            |
| 3 | 0      | Yes     | 12            |
| 4 | 0      | Yes     | 9             |
| 5 | ≠0     | No      | —             |
| 6 | 0      | Yes     | 6             |


Final factors (sorted):
{1, 2, 3, 4, 6, 9, 12, 18, 36}




def find_factors(n):
    factors = set()
    for i in range(1, int(abs(n) ** 0.5) + 1):
        if n % i == 0:
            factors.add(i)
            factors.add(abs(n) // i)
    return sorted(factors)

print(find_factors(36))  # Output: [1, 2, 3, 4, 6, 9, 12, 18, 36]



In Python, you can do it in 3 main ways:
 1. Using ** operator (preferred)
result = 5 ** (1/2)
print(result)  # Output: 2.23606797749979

2. Using math.pow() function
import math
result = math.pow(5, 1/2)
print(result)  # Output: 2.23606797749979

3. Using math.sqrt() function (for square root only)
import math
result = math.sqrt(5)
print(result)  # Output: 2.23606797749979






More knowledge, if you got time to learn it:

lets say if you want to find squareroot of a number: that sqrt(7) or 7^(1/2) or 7^0.5 manually
you can take a guess and solve it and this method is called: the Babylonian (Heron's) method, step by step without a calculator


Approximate √5 manually
We’ll use the formula:

x new = 1/2 * (x+n/x)
Start with:
n = 5
An initial guess x = 2

iteration 1:
x=2
x new = 1/2(2+5/2) = 1/2(2+2.5) = 1/2*4.5 = 2.25

iteration 2:
x=2.25
x new = 1/2(2.25+5/2.25) = 2.236

iteration 3:
x=2.236
x new = 1/2(2.236+5/2.236) = 2.236



so its safe to say square root of 5 is 2.236



guessing strategy:

| n   | Nearby square | √(square) | Good guess |
| --- | ------------- | --------- | ---------- |
| 5   | 4             | 2         | 2          |
| 10  | 9             | 3         | 3          |
| 20  | 16            | 4         | 4 or 4.5   |
| 50  | 49            | 7         | 7          |


for large numbers:

x₀ = n / 2  → if n is small  
x₀ = n / 10 → if n is large (like 10000)


| Scenario        | Suggested Initial Guess                  |
| --------------- | ---------------------------------------- |
| General use     | x₀ = n / 2                               |
| Smarter, faster | Nearest √(perfect square                 |
| Large numbers   | x₀ = n / 10 or √(nearest perfect square) |



example for 5000

when n is divided by 10 instead of 2 we can find the sqaure root quicker
5000/10 = 500 whereas divided by 2 is 2500
and the square root of 5000 is 70.71

when we iterate , we find the value in 5 iteratoraion
x = 500, and we find xnew= 136.3
x = 136.3 , and solving for xnew will give 86.85
x = 86.84 , and xnew we find 72.2 



code:

def babylonian_sqrt(n, tolerance=1e-10):
    if n < 0:
        raise ValueError("Cannot compute square root of a negative number.")
    if n == 0:
        return 0

    x = n / 2  # Initial guess
    while True:
        new_x = 0.5 * (x + n / x)  # Update guess
        if abs(new_x - x) < tolerance:  # Check for convergence
            return new_x
        x = new_x

# Example usage:
print(babylonian_sqrt(5))  # Output: ~2.23606797749979


| Tolerance       | Result Accuracy | Speed     |
| --------------- | --------------- | --------- |
| 1e-2 (0.01)     | Less accurate   | Very fast |
| 1e-6 (0.000001) | Good accuracy   | Slower    |
| 1e-10           | High precision  | Slowest   |



here e stands for times ten to the power of, its a scientific notation:
1e-2 = 1*10^-2 = 0.01



